line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#checkParameters#?#538	0.0	1.894736842105263	1.894736842105263	!(inputSigma != null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#initializeCMA#?,double[]#561	0.0	1.875	1.875	lambda <= 0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#729	0.0	1.8666666666666667	1.8666666666666667	negccov > negcovMax	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#decode#?,double[]#930	0.0	0.5416666666666666	0.5416666666666666	!(boundaries == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#value#?,double[]#947	0.0	0.5416666666666666	0.5416666666666666	boundaries != null && isRepairMode	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#encode#?,double[]#905	0.0	0.5416666666666666	0.5416666666666666	!(boundaries == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#repair#?,double[]#994	0.0	0.33333333333333337	0.33333333333333337	x[i] > 1.0	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#PointValuePair#optimize#?,int,FUNC,GoalType,double[],double[],double[]#122	0.0	0.16666666666666666	0.16666666666666666	!(lower == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#boolean#updateEvolutionPaths#?,RealMatrix,RealMatrix#646	0.0	0.008333333333333331	0.008333333333333331	!(hsig)	_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1155	0.0	0.007845388442403367	0.007845388442403367	x < 1.01 && x > 0.99 && hiPrec == null	_
org.apache.commons.math3.linear.MatrixUtils#void#checkAdditionCompatible#?,AnyMatrix,AnyMatrix#506	0.0	0.005692599620493358	0.005692599620493358	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2291	0.0	0.003526194588370753	0.003526194588370753	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#max#?,double,double#3510	0.0	0.0023135561597100057	0.0023135561597100057	!(a < b)	_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2236	0.0	0.00195409532010731	0.00195409532010731	xa > 1.5707963267948966	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#96	0.0	0.0017368649587494592	0.0017368649587494592	equals(x,y,eps)	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1794	0.0	0.0016150498721418849	0.0016150498721418849	!(xb != 0.0)	_
org.apache.commons.math3.linear.EigenDecomposition#?#EigenDecomposition#?,RealMatrix#116	0.0	0.0012195121951219523	0.0012195121951219523	isSymmetric(matrix,false)	_
org.apache.commons.math3.linear.EigenDecomposition#boolean#isSymmetric#?,RealMatrix,boolean#195	0.0	0.0012195121951219523	0.0012195121951219523	!(i < rows)	_
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#582	0.0	0.0010570824524312877	0.0010570824524312877	FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue	_
org.apache.commons.math3.linear.TriDiagonalTransformer#?#TriDiagonalTransformer#?,RealMatrix#63	0.0	8.503401360544227E-4	8.503401360544227E-4	!(!matrix.isSquare())	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][],boolean#116	0.0	7.839038411288217E-4	7.839038411288217E-4	r < nRows	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#337	0.0	1.0518130627669431E-4	1.0518130627669431E-4	!(yInt < 0)	_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#68	0.0	1.2284106822592865E-5	1.2284106822592865E-5	!(rowDimension < 1)	_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#264	0.0	8.701648744896193E-6	8.701648744896193E-6	!(o == null)	_
org.apache.commons.math3.util.Incrementor#void#incrementCount#?#155	0.0	7.644324853228746E-6	7.644324853228746E-6	!(++count > maximalCount)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#times#?,RealMatrix,RealMatrix#1072	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#241	0.0	0.0	0.0	k < N - 1	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#reverse#?,int[]#1327	0.0	0.0	0.0	i < indices.length	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#multiply#?,RealMatrix#150	0.0	0.0	0.0	i < nSum	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#divide#?,RealMatrix,RealMatrix#1087	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQ#?#86	0.0	0.0	0.0	cachedQ == null	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#469	0.0	0.0	0.0	!(i < nRows)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1055	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1222	0.0	0.0	0.0	r < n * rd	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateBD#?,double#768	0.0	0.0	0.0	ccov1 + ccovmu + negccov > 0 && (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#PointValuePair#optimizeInternal#?,int,MultivariateFunction,GoalType,double[]#128	0.0	0.0	0.0	!(f == null)	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#562	0.0	0.0	0.0	!(i < nRows)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#eye#?,int,int#1196	0.0	0.0	0.0	r < m	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#log#?,RealMatrix#1026	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#418	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextGaussian#?#99	0.0	0.0	0.0	!(Double.isNaN(nextGaussian))	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#push#?,double[],double#805	0.0	0.0	0.0	i > 0	_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int,MaxCountExceededCallback#81	0.0	0.0	0.0	!(cb == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#randn1#?,int,int#1352	0.0	0.0	0.0	!(r < size)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#ones#?,int,int#1182	0.0	0.0	0.0	r < n	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#537	0.0	0.0	0.0	i < nCols	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getD#?#252	0.0	0.0	0.0	!(Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) > 0)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#walkInRowOrder#?,RealMatrixPreservingVisitor#411	0.0	0.0	0.0	!(j < columns)	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createColumnRealMatrix#?,double[]#344	0.0	0.0	0.0	!(i < nRows)	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,double[][]#130	0.0	0.0	0.0	!(data == null || data[0] == null)	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarMultiply#?,double#129	0.0	0.0	0.0	row < rowCount	_
org.apache.commons.math3.linear.MatrixUtils#void#checkSubtractionCompatible#?,AnyMatrix,AnyMatrix#523	0.0	0.0	0.0	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.util.FastMath$CodyWaite#?#CodyWaite#?,double,double#3808	0.0	0.0	0.0	remA > 0	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#402	0.0	0.0	0.0	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#copyColumn#?,RealMatrix,int,RealMatrix,int#1170	0.0	0.0	0.0	i < m1.getRowDimension()	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#98	0.0	0.0	0.0	cachedQt == null	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#subtract#?,RealMatrix#101	0.0	0.0	0.0	row < rowCount	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,RealMatrix#1254	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealDiagonalMatrix#?,double[]#217	0.0	0.0	0.0	!(i < diagonal.length)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,double[]#1302	0.0	0.0	0.0	min > m[r]	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#inverse#?,int[]#1315	0.0	0.0	0.0	i < indices.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sqrt#?,RealMatrix#1042	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#diag#?,RealMatrix#1146	0.0	0.0	0.0	m.getColumnDimension() == 1	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sumRows#?,RealMatrix#1132	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarAdd#?,double#115	0.0	0.0	0.0	!(row < rowCount)	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getV#?#226	0.0	0.0	0.0	!(k < m)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#sortedIndices#?,double[]#824	0.0	0.0	0.0	i < doubles.length	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#523	0.0	0.0	0.0	!(vector.getDimension() != nRows)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#triu#?,RealMatrix,int#1117	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,RealMatrix#1273	0.0	0.0	0.0	min > e	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#279	0.0	0.0	0.0	!(nRows == 0)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#selectColumns#?,RealMatrix,int[]#1102	0.0	0.0	0.0	c < cols.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,double[]#1288	0.0	0.0	0.0	!(max < m[r])	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#add#?,RealMatrix#85	0.0	0.0	0.0	col < columnCount	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMultiplicationCompatible#?,AnyMatrix,AnyMatrix#541	0.0	0.0	0.0	!(left.getColumnDimension() != right.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#penalty#?,double[],double[]#1010	0.0	0.0	0.0	i < x.length	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#copyOut#?#527	0.0	0.0	0.0	!(i < nRows)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1240	0.0	0.0	0.0	!(r < size)	_
