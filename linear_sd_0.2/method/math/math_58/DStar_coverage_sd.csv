line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#VectorialPointValuePair#doOptimize#?#405	0.047619047619047616	Infinity	Infinity	FastMath.sqrt(xNorm)<=coeff2	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#WeightedObservedPoint[]#getInterpolationPointsForY#?,WeightedObservedPoint[],int,int,double#277	0.5	0.5	0.4		_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double[]#basicGuess#?,WeightedObservedPoint[]#183	0.5	0.0	0.4		_
org.apache.commons.math.analysis.function.Gaussian$Parametric#void#validateParameters#?,double[]#183	0.5	0.5	0.4		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#determineLMParameter#?,double[],double,double[],double[],double[],double[]#533	0.06666666666666667	1.0	0.24210526315789474	fp / (delta * sum2)>dxNorm	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double#interpolateXAtY#?,WeightedObservedPoint[],int,int,double#223	0.2	0.2	0.20000000000000004	!(idxStep == 0)	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double[]#guess#?#156	0.2	0.2	0.20000000000000004	parameters == null	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#int#findMaxY#?,WeightedObservedPoint[]#203	0.2	0.2	0.20000000000000004	maxYIdx!=0	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#double#value#?,double,double[]#132	0.16666666666666666	0.16666666666666666	0.16666666666666666	Gaussian.value(diff,param[0],i2s2)>0	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#boolean#isBetween#?,double,double,double#291	0.2	0.0	0.16000000000000003		_
org.apache.commons.math.optimization.fitting.GaussianFitter#double[]#fit#?#121	0.2	0.0	0.16000000000000003		GT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#?#ParameterGuesser#?,WeightedObservedPoint[]#147	0.2	0.2	0.16000000000000003		_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#Comparator<WeightedObservedPoint>#createWeightedObservedPointComparator#?#302	0.2	0.0	0.16000000000000003		_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#?#WeightedObservedPoint#?,double,double,double#49	0.05	0.5	0.14	x==weight	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#double[]#gradient#?,double,double[]#154	0.16666666666666666	0.0	0.13333333333333333		_
org.apache.commons.math.optimization.fitting.GaussianFitter#?#GaussianFitter#?,DifferentiableMultivariateVectorialOptimizer#68	0.14285714285714285	0.0	0.11428571428571428		_
org.apache.commons.math.optimization.fitting.CurveFitter#void#addObservedPoint#?,double,double#67	0.1111111111111111	0.0	0.08888888888888889		_
org.apache.commons.math.analysis.function.Gaussian#double#value#?,double,double,double#197	0.08333333333333333	0.1	0.08666666666666667	norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2)!=0	_
org.apache.commons.math.optimization.fitting.CurveFitter#WeightedObservedPoint[]#getObservations#?#100	0.1	0.0	0.08000000000000002		_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getX#?#64	0.05263157894736842	0.14285714285714285	0.07067669172932331	x==0	_
org.apache.commons.math.exception.NotStrictlyPositiveException#?#NotStrictlyPositiveException#?,Number#38	0.07142857142857142	0.0	0.05714285714285714		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#determineLMDirection#?,double[],double[],double[],double[]#688	0.05	0.08333333333333333	0.05666666666666667	sin * cotan>=dpj	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getY#?#71	0.05263157894736842	0.05555555555555555	0.05321637426900585	y>0	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getWeight#?#57	0.05263157894736842	0.05263157894736842	0.05263157894736842	weight>0	_
org.apache.commons.math.optimization.fitting.CurveFitter#double[]#fit#?,ParametricUnivariateRealFunction,double[]#126	0.05263157894736842	0.0	0.042105263157894736		_
org.apache.commons.math.optimization.fitting.CurveFitter#double[]#fit#?,int,ParametricUnivariateRealFunction,double[]#152	0.05263157894736842	0.0	0.042105263157894736		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#MultivariateMatrixFunction#jacobian#?#183	0.05263157894736842	0.0	0.042105263157894736		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#?#TheoreticalValuesFunction#?,ParametricUnivariateRealFunction#178	0.05263157894736842	0.0	0.042105263157894736		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#double[]#value#?,double[]#203	0.05263157894736842	0.0	0.042105263157894736		_
org.apache.commons.math.optimization.fitting.CurveFitter#void#addObservedPoint#?,double,double,double#80	0.05	0.0	0.04000000000000001		_
org.apache.commons.math.exception.OutOfRangeException#?#OutOfRangeException#?,Number,Number,Number#46	0.05	0.0	0.04000000000000001		_
org.apache.commons.math.optimization.fitting.CurveFitter#?#CurveFitter#?,DifferentiableMultivariateVectorialOptimizer#53	0.047619047619047616	0.0	0.0380952380952381		_
org.apache.commons.math.exception.NumberIsTooSmallException#?#NumberIsTooSmallException#?,Number,Number,boolean#52	0.043478260869565216	0.0	0.034782608695652174		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#qrDecomposition#?#828	0.022727272727272728	0.07142857142857142	0.03130699088145897	gamma * weightedResidualJacobian[j][pk]>ak2	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?#152	0.03225806451612903	0.0	0.025806451612903226		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?,double,double,double,double,double#212	0.0196078431372549	0.03125	0.02193627450980392	orthoTolerance==parRelativeTolerance	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#qTy#?,double[]#842	0.020833333333333332	0.024390243902439025	0.021544715447154472	permutation[k]<k	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#void#updateResidualsAndCost#?#142	0.014492753623188406	0.02702702702702703	0.01699960830395613	cols<i	_
org.apache.commons.math.optimization.SimpleVectorialValueChecker#boolean#converged#?,int,VectorialPointValuePair,VectorialPointValuePair#83	0.015873015873015872	0.015873015873015872	0.015674603174603174	difference > size * getRelativeThreshold() && difference > getAbsoluteThreshold()	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#void#updateJacobian#?#115	0.014492753623188406	0.014705882352941176	0.01453537936913896	-ji[j] * wi<wi	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#VectorialPointValuePair#optimize#?,int,DifferentiableMultivariateVectorialFunction,double[],double[],double[]#246	0.014285714285714285	0.014285714285714285	0.014285714285714285	point.length!=maxEval	_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#VectorialPointValuePair#optimize#?,int,FUNC,double[],double[],double[]#120	0.014285714285714285	0.014285714285714285	0.014285714285714285	!(w == null)	_
org.apache.commons.math.optimization.VectorialPointValuePair#double[]#getValueRef#?#97	0.015625	0.0	0.0125		_
org.apache.commons.math.exception.NumberIsTooSmallException#?#NumberIsTooSmallException#?,Localizable,Number,Number,boolean#73	0.015384615384615385	0.0	0.01230769230769231		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#getTargetRef#?#165	0.014492753623188406	0.0	0.011594202898550725		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#getWeightRef#?#171	0.014492753623188406	0.0	0.011594202898550725		_
org.apache.commons.math.optimization.VectorialPointValuePair#?#VectorialPointValuePair#?,double[],double[]#47	0.014492753623188406	0.0	0.011594202898550725		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#ConvergenceChecker<VectorialPointValuePair>#getConvergenceChecker#?#88	0.014285714285714285	0.0	0.011428571428571429		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#computeObjectiveValue#?,double[]#107	0.014285714285714285	0.0	0.011428571428571429		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#?#BaseAbstractVectorialOptimizer#?#62	0.013888888888888888	0.0	0.011111111111111112		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#?#BaseAbstractVectorialOptimizer#?,ConvergenceChecker<VectorialPointValuePair>#68	0.013888888888888888	0.0	0.011111111111111112		_
org.apache.commons.math.util.FastMath#double#min#?,double,double#3831	0.010869565217391304	0.01098901098901099	0.010893454371715242	a>=0	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#double#getRelativeThreshold#?#73	0.009433962264150943	0.010309278350515464	0.009609025481423847	relativeThreshold>0	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#80	0.009523809523809525	0.009523809523809525	0.009523809523809525	absoluteThreshold>0	_
org.apache.commons.math.util.FastMath#double#exp#?,double,double,double[]#780	0.004545454545454545	0.034482758620689655	0.009195402298850575	x - (intVal + intFrac / 1024.0)<extra	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#?#AbstractConvergenceChecker#?#54	0.008333333333333333	0.0	0.006666666666666667		_
org.apache.commons.math.exception.OutOfRangeException#?#OutOfRangeException#?,Localizable,Number,Number,Number#62	0.008333333333333333	0.0	0.006666666666666667		_
org.apache.commons.math.util.Incrementor#void#incrementCount#?#84	0.005	0.005	0.005	!(++count > maximalCount)	_
org.apache.commons.math.util.FastMath#double#max#?,double,double#3911	0.004081632653061225	0.005649717514124294	0.004395249625273839	a>0	_
org.apache.commons.math.util.Incrementor#void#resetCount#?#93	0.004901960784313725	0.0	0.00392156862745098		_
org.apache.commons.math.util.Incrementor#void#setMaximalCount#?,int#44	0.004807692307692308	0.0	0.0038461538461538464		_
org.apache.commons.math.util.FastMath#double#exp#?,double#697	0.003663003663003663	0.003787878787878788	0.003687978687978688	exp(x,0.0,null)>0	_
org.apache.commons.math.exception.util.ArgUtils#Object[]#flatten#?,Object[]#45	0.0035842293906810036	0.003484320557491289	0.0032527746546292483	o instanceof Object[]	_
org.apache.commons.math.exception.MathIllegalNumberException#?#MathIllegalNumberException#?,Localizable,Localizable,Number,Object#51	0.004032258064516129	0.0	0.0032258064516129032		_
org.apache.commons.math.util.FastMath#int#min#?,int,int#3784	0.003205128205128205	0.003215434083601286	0.0032071893808228212	(a <= b) ? a : b>0	_
org.apache.commons.math.exception.MathIllegalArgumentException#?#MathIllegalArgumentException#?,Localizable,Localizable,Object#44	0.003115264797507788	0.0	0.0024922118380062306		_
org.apache.commons.math.exception.MathRuntimeException#?#MathRuntimeException#?,Throwable,Localizable,Localizable,Object#68	0.002717391304347826	0.0	0.002173913043478261		_
org.apache.commons.math.util.FastMath#double#sqrt#?,double#277	0.0020833333333333333	0.00211864406779661	0.002090395480225989	Math.sqrt(a)!=0	_
org.apache.commons.math.util.FastMath#double#abs#?,double#3380	0.0015105740181268882	0.0016051364365971107	0.0015294865018209327	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x>0	_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1130	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1021	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1798	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1071	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1909	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1047	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1729	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1061	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1810	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1096	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#988	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1220	0.0	0.0	0.0		_
