line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int,double[][],boolean#153	0.0	1.2114385822130826	0.24228771644261654	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>columns	_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#toBlocksLayout#?,double[][]#241	0.0	1.210984860424713	0.24219697208494262	jWidth==iBlock	_
org.apache.commons.math.stat.regression.SimpleRegression#void#addData#?,double,double#129	0.0	0.6678763873361495	0.1335752774672299	dy * dy * (double)n / (n + 1d)==dx	_
org.apache.commons.math.linear.BlockRealMatrix#double[]#getColumn#?,int#1194	0.0	0.6245397288574763	0.12490794577149528	blockHeight(iBlock)<=outIndex	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getR#?#433	0.0	0.21733559261288532	0.043467118522577064	Math.sqrt(getRSquare())<b1	_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double,double,int#151	0.0	0.20287674186914592	0.04057534837382919	Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a,b,epsilon,maxIterations)) * 1.0 / fraction.evaluate(x,epsilon,maxIterations)<epsilon	_
org.apache.commons.math.special.Gamma#double#logGamma#?,double#109	0.0	0.14812732807855672	0.029625465615711347	((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x)>tmp	_
org.apache.commons.math.distribution.TDistributionImpl#double#cumulativeProbability#?,double#131	0.0	0.12227981106138479	0.024455962212276958	Beta.regularizedBeta(degreesOfFreedom / (degreesOfFreedom + (x * x)),0.5 * degreesOfFreedom,0.5)<x	_
org.apache.commons.math.linear.BlockRealMatrix#double#getEntry#?,int,int#1242	0.0	0.10141042200837831	0.020282084401675664	blocks[iBlock * blockColumns + jBlock][k]==0	_
org.apache.commons.math.util.ContinuedFraction#double#evaluate#?,double,double,int#140	0.0	0.09609211535005699	0.019218423070011398	a * q1 + b * q0<p0	_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#createBlocksLayout#?,int,int#279	0.0	0.05603272125452952	0.011206544250905906	qEnd - qStart==rows	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#void#checkSufficientData#?,RealMatrix#275	0.0	0.05497385618089276	0.010994771236178553	!(nRows < 2 || nCols < 2)	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSlope#?#304	0.0	0.03143125533047464	0.006286251066094928	sumXY / sumXX>=0	_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int#100	0.0	0.028032713712961607	0.005606542742592322	columns==rows	_
org.apache.commons.math.special.Beta#double#logBeta#?,double,double,double,int#199	0.0	0.022565485948988454	0.004513097189797691	ret<=0	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#double#correlation#?,double[],double[]#226	0.0	0.021826691111600887	0.004365338222320178	xArray.length == yArray.length && xArray.length > 1	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSumSquaredErrors#?#337	0.0	0.021669036655015857	0.004333807331003171	Math.max(0d,sumYY - sumXY * sumXY / sumXX)!=0	_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double#54	0.0	0.004959936980087987	9.919873960175976E-4	regularizedBeta(x,a,b,DEFAULT_EPSILON,Integer.MAX_VALUE)>0	_
org.apache.commons.math.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#56	0.0	8.948293255281387E-5	1.7896586510562776E-5	!(rowDimension <= 0)	_
org.apache.commons.math.linear.BlockRealMatrix#int#getColumnDimension#?#1351	0.0	0.0	0.0	columns!=0	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#computeCorrelationMatrix#?,RealMatrix#190	0.0	0.0	0.0	j < i	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getRSquare#?#456	0.0	0.0	0.0	(ssto - getSumSquaredErrors()) / ssto>0	_
org.apache.commons.math.linear.BlockRealMatrix#int#getRowDimension#?#1345	0.0	0.0	0.0	rows!=0	_
org.apache.commons.math.stat.regression.SimpleRegression#void#setDistribution#?,TDistribution#617	0.0	0.0	0.0	!(n > 2)	_
org.apache.commons.math.distribution.TDistributionImpl#void#setDegreesOfFreedomInternal#?,double#88	0.0	0.0	0.0	!(newDegreesOfFreedom <= 0.0)	_
org.apache.commons.math.linear.BlockRealMatrix#int#blockHeight#?,int#1675	0.0	0.0	0.0	(blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE>=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#blockWidth#?,int#1684	0.0	0.0	0.0	(blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE>0	_
org.apache.commons.math.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#544	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#getCorrelationPValues#?#170	0.0	0.0	0.0	Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))>=r	GT
org.apache.commons.math.stat.regression.SimpleRegression#double#getTotalSumSquares#?#351	0.0	0.0	0.0	!(n < 2)	_
org.apache.commons.math.linear.BlockRealMatrix#void#setEntry#?,int,int,double#1255	0.0	0.0	0.0	row / BLOCK_SIZE==row	_
org.apache.commons.math.distribution.TDistributionImpl#?#TDistributionImpl#?,double,double#63	0.0	0.0	0.0	inverseCumAccuracy!=degreesOfFreedom	_
