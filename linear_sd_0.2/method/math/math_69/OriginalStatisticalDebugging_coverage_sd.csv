line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int,double[][],boolean#153	0.0	0.9900990099009901	0.19801980198019803	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>columns	_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#toBlocksLayout#?,double[][]#241	0.0	0.9897959183673469	0.1979591836734694	jWidth==iBlock	_
org.apache.commons.math.stat.regression.SimpleRegression#void#addData#?,double,double#129	0.0	0.5945945945945946	0.11891891891891893	dy * dy * (double)n / (n + 1d)==dx	_
org.apache.commons.math.linear.BlockRealMatrix#double[]#getColumn#?,int#1194	0.0	0.56	0.11200000000000002	blockHeight(iBlock)<=outIndex	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getR#?#433	0.0	0.208955223880597	0.041791044776119404	Math.sqrt(getRSquare())<b1	_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double,double,int#151	0.0	0.19555555555555554	0.03911111111111111	Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a,b,epsilon,maxIterations)) * 1.0 / fraction.evaluate(x,epsilon,maxIterations)<epsilon	_
org.apache.commons.math.special.Gamma#double#logGamma#?,double#109	0.0	0.14418604651162792	0.028837209302325584	((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x)>tmp	_
org.apache.commons.math.distribution.TDistributionImpl#double#cumulativeProbability#?,double#131	0.0	0.11958146487294469	0.02391629297458894	Beta.regularizedBeta(degreesOfFreedom / (degreesOfFreedom + (x * x)),0.5 * degreesOfFreedom,0.5)<x	_
org.apache.commons.math.linear.BlockRealMatrix#double#getEntry#?,int,int#1242	0.0	0.09954751131221722	0.019909502262443445	blocks[iBlock * blockColumns + jBlock][k]==0	_
org.apache.commons.math.util.ContinuedFraction#double#evaluate#?,double,double,int#140	0.0	0.09441786283891547	0.018883572567783096	a * q1 + b * q0<p0	_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#createBlocksLayout#?,int,int#279	0.0	0.05545927209705372	0.011091854419410746	qEnd - qStart==rows	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#void#checkSufficientData#?,RealMatrix#275	0.0	0.054421768707482984	0.010884353741496598	!(nRows < 2 || nCols < 2)	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSlope#?#304	0.0	0.03125	0.00625	sumXY / sumXX>=0	_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int#100	0.0	0.027888446215139445	0.00557768924302789	columns==rows	_
org.apache.commons.math.special.Beta#double#logBeta#?,double,double,double,int#199	0.0	0.022471910112359543	0.004494382022471909	ret<=0	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#double#correlation#?,double[],double[]#226	0.0	0.021739130434782643	0.004347826086956529	xArray.length == yArray.length && xArray.length > 1	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSumSquaredErrors#?#337	0.0	0.02158273381294964	0.004316546762589929	Math.max(0d,sumYY - sumXY * sumXY / sumXX)!=0	_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double#54	0.0	0.00495540138751239	9.910802775024781E-4	regularizedBeta(x,a,b,DEFAULT_EPSILON,Integer.MAX_VALUE)>0	_
org.apache.commons.math.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#56	0.0	8.948145496845663E-5	1.7896290993691328E-5	!(rowDimension <= 0)	_
org.apache.commons.math.linear.BlockRealMatrix#int#getColumnDimension#?#1351	0.0	0.0	0.0	columns!=0	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#computeCorrelationMatrix#?,RealMatrix#190	0.0	0.0	0.0	j < i	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getRSquare#?#456	0.0	0.0	0.0	(ssto - getSumSquaredErrors()) / ssto>0	_
org.apache.commons.math.linear.BlockRealMatrix#int#getRowDimension#?#1345	0.0	0.0	0.0	rows!=0	_
org.apache.commons.math.stat.regression.SimpleRegression#void#setDistribution#?,TDistribution#617	0.0	0.0	0.0	!(n > 2)	_
org.apache.commons.math.distribution.TDistributionImpl#void#setDegreesOfFreedomInternal#?,double#88	0.0	0.0	0.0	!(newDegreesOfFreedom <= 0.0)	_
org.apache.commons.math.linear.BlockRealMatrix#int#blockHeight#?,int#1675	0.0	0.0	0.0	(blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE>=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#blockWidth#?,int#1684	0.0	0.0	0.0	(blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE>0	_
org.apache.commons.math.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#544	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#getCorrelationPValues#?#170	0.0	0.0	0.0	Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))>=r	GT
org.apache.commons.math.stat.regression.SimpleRegression#double#getTotalSumSquares#?#351	0.0	0.0	0.0	!(n < 2)	_
org.apache.commons.math.linear.BlockRealMatrix#void#setEntry#?,int,int,double#1255	0.0	0.0	0.0	row / BLOCK_SIZE==row	_
org.apache.commons.math.distribution.TDistributionImpl#?#TDistributionImpl#?,double,double#63	0.0	0.0	0.0	inverseCumAccuracy!=degreesOfFreedom	_
