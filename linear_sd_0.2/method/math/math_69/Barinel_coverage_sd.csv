line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.stat.correlation.PearsonsCorrelation#?#PearsonsCorrelation#?,double[][]#68	1.0	0.0	0.8		_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#getCorrelationPValues#?#170	0.2857142857142857	0.2857142857142857	0.2857142857142857	Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))>=r	GT
org.apache.commons.math.linear.BlockRealMatrix#double[][]#toBlocksLayout#?,double[][]#208	0.02020202020202022	1.0	0.2161616161616162	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>columns	_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int,double[][],boolean#153	0.019607843137254943	1.0	0.21568627450980396	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>columns	_
org.apache.commons.math.linear.BlockRealMatrix#double[]#getColumn#?,int#1194	0.11111111111111116	0.5	0.18888888888888894	blockHeight(iBlock)<=outIndex	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#computeCorrelationMatrix#?,RealMatrix#190	0.18181818181818177	0.18181818181818177	0.18181818181818177	j < i	_
org.apache.commons.math.stat.regression.SimpleRegression#void#addData#?,double,double#129	0.07999999999999996	0.5	0.16153846153846152	dy * dy * (double)n / (n + 1d)==dx	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#void#checkSufficientData#?,RealMatrix#275	0.15384615384615385	0.18181818181818177	0.15944055944055943	!(nRows < 2 || nCols < 2)	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getR#?#433	0.1333333333333333	0.25	0.15666666666666665	Math.sqrt(getRSquare())<b1	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#double#correlation#?,double[],double[]#227	0.15384615384615385	0.15384615384615385	0.15384615384615385	!(i < xArray.length)	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#?#PearsonsCorrelation#?,RealMatrix#79	0.18181818181818177	0.0	0.14545454545454542		_
org.apache.commons.math.stat.regression.SimpleRegression#double#getRSquare#?#456	0.11764705882352944	0.11764705882352944	0.11764705882352944	(ssto - getSumSquaredErrors()) / ssto>0	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getTotalSumSquares#?#354	0.11764705882352944	0.11764705882352944	0.11764705882352944	sumYY>0	_
org.apache.commons.math.distribution.TDistributionImpl#double#cumulativeProbability#?,double#139	0.10526315789473684	0.11764705882352944	0.10773993808049537	1.0 - 0.5 * t<x	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSlope#?#304	0.09523809523809523	0.11111111111111116	0.09841269841269842	sumXY / sumXX>=0	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSumSquaredErrors#?#337	0.07999999999999996	0.09090909090909094	0.08218181818181816	Math.max(0d,sumYY - sumXY * sumXY / sumXX)!=0	_
org.apache.commons.math.linear.BlockRealMatrix#void#setEntry#?,int,int,double#1256	0.07999999999999996	0.07999999999999996	0.07999999999999996	column / BLOCK_SIZE==iBlock	_
org.apache.commons.math.stat.regression.SimpleRegression#void#setDistribution#?,TDistribution#617	0.06666666666666665	0.06666666666666665	0.06666666666666665	!(n > 2)	_
org.apache.commons.math.distribution.TDistributionImpl#?#TDistributionImpl#?,double,double#63	0.06060606060606055	0.06060606060606055	0.06060606060606055	inverseCumAccuracy!=degreesOfFreedom	_
org.apache.commons.math.linear.BlockRealMatrix#double#getEntry#?,int,int#1242	0.04761904761904767	0.09999999999999998	0.05809523809523814	blocks[iBlock * blockColumns + jBlock][k]==0	_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double,double,int#151	0.03448275862068961	0.1428571428571429	0.05615763546798028	Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a,b,epsilon,maxIterations)) * 1.0 / fraction.evaluate(x,epsilon,maxIterations)<epsilon	_
org.apache.commons.math.stat.regression.SimpleRegression#?#SimpleRegression#?,TDistribution#105	0.06666666666666665	0.0	0.05333333333333332		_
org.apache.commons.math.stat.regression.SimpleRegression#?#SimpleRegression#?#94	0.06666666666666665	0.0	0.05333333333333332		_
org.apache.commons.math.distribution.TDistributionImpl#?#TDistributionImpl#?,double#71	0.06060606060606055	0.0	0.04848484848484844		_
org.apache.commons.math.distribution.TDistributionImpl#void#setDegreesOfFreedomInternal#?,double#88	0.039215686274509776	0.039215686274509776	0.039215686274509776	!(newDegreesOfFreedom <= 0.0)	_
org.apache.commons.math.distribution.TDistributionImpl#void#setDegreesOfFreedom#?,double#81	0.045454545454545414	0.0	0.036363636363636334		_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#createBlocksLayout#?,int,int#275	0.030303030303030276	0.05882352941176472	0.036007130124777166	pEnd - pStart==columns	_
org.apache.commons.math.special.Beta#double#logBeta#?,double,double,double,int#195	0.033333333333333326	0.04166666666666663	0.03499999999999999	Gamma.logGamma(a) + Gamma.logGamma(b) - Gamma.logGamma(a + b)<=epsilon	_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int#100	0.030303030303030276	0.0444444444444444	0.0331313131313131	columns==rows	_
org.apache.commons.math.special.Gamma#double#logGamma#?,double#109	0.01754385964912286	0.09523809523809523	0.03308270676691734	((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x)>tmp	_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double#54	0.030303030303030276	0.032786885245901676	0.030799801291604558	regularizedBeta(x,a,b,DEFAULT_EPSILON,Integer.MAX_VALUE)>0	_
org.apache.commons.math.util.ContinuedFraction#double#evaluate#?,double,double,int#140	0.01941747572815533	0.06896551724137934	0.029327084030800137	a * q1 + b * q0<p0	_
org.apache.commons.math.distribution.AbstractContinuousDistribution#?#AbstractContinuousDistribution#?#53	0.03448275862068961	0.0	0.027586206896551693		_
org.apache.commons.math.distribution.AbstractDistribution#?#AbstractDistribution#?#39	0.02941176470588236	0.0	0.02352941176470589		_
org.apache.commons.math.linear.BlockRealMatrix#int#blockHeight#?,int#1675	0.018181818181818188	0.018181818181818188	0.018181818181818188	(blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE>=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#getColumnDimension#?#1351	0.017699115044247815	0.017699115044247815	0.017699115044247815	columns!=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#getRowDimension#?#1345	0.01754385964912286	0.01754385964912286	0.01754385964912286	rows!=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#blockWidth#?,int#1684	0.01666666666666672	0.01666666666666672	0.01666666666666672	(blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE>0	_
org.apache.commons.math.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#544	0.016393442622950838	0.016393442622950838	0.016393442622950838	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,double[][]#126	0.02020202020202022	0.0	0.01616161616161618		_
org.apache.commons.math.util.ContinuedFraction#?#ContinuedFraction#?#46	0.01941747572815533	0.0	0.015533980582524266		_
org.apache.commons.math.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#61	0.006711409395973145	0.006711409395973145	0.0067114093959731455	!(columnDimension <= 0)	_
