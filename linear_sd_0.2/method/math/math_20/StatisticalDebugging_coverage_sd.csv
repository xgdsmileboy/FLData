line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?,int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>#308	0.0	1.9166666666666667	0.38333333333333336	lambda==diagonalOnly	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#checkParameters#?#538	0.0	1.894736842105263	0.37894736842105264	!(inputSigma != null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1220	0.0	1.875	0.375	mat.getColumnDimension()==m	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#push#?,double[],double#806	0.0	1.875	0.375	vals[i - 1]==val	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#initializeCMA#?,double[]#591	0.0	1.875	0.375	sumw * sumw / sumwq>=sumwq	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex#int#compareTo#?,DoubleIndex#851	0.0	1.875	0.375	Double.compare(value,o.value)==0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#727	0.0	1.8666666666666667	0.37333333333333335	(1. - negminresidualvariance) / square(arnormsInv).multiply(weights).getEntry(0,0)<negccov	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#penalty#?,double[],double[]#1014	0.0	1.3333333333333335	0.2666666666666667	isMinimize ? penalty : -penalty>0	_
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#674	0.0	0.9545454545454545	0.19090909090909092	realEigenvalues[i]==maxAbsoluteValue	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarMultiply#?,double#127	0.0	0.8999999999999999	0.18	getColumnDimension()>rowCount	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#decode#?,double[]#930	0.0	0.5416666666666666	0.10833333333333334	!(boundaries == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#value#?,double[]#947	0.0	0.5416666666666666	0.10833333333333334	boundaries != null && isRepairMode	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#encode#?,double[]#905	0.0	0.5416666666666666	0.10833333333333334	!(boundaries == null)	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#560	0.0	0.34871794871794876	0.06974358974358975	getRowDimension()<column	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#repair#?,double[]#994	0.0	0.33333333333333337	0.06666666666666668	x[i] > 1.0	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#467	0.0	0.30000000000000004	0.06000000000000001	getRowDimension()<column	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#subtract#?,RealMatrix#99	0.0	0.2621848739495798	0.05243697478991596	getColumnDimension()>rowCount	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#multiply#?,RealMatrix#144	0.0	0.1761904761904762	0.03523809523809524	m.getColumnDimension()>nRows	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#PointValuePair#optimize#?,int,FUNC,GoalType,double[],double[],double[]#122	0.0	0.16666666666666666	0.03333333333333333	!(lower == null)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#walkInRowOrder#?,RealMatrixPreservingVisitor#407	0.0	0.10385395537525355	0.020770791075050712	getColumnDimension()>rows	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#transpose#?#599	0.0	0.10375816993464052	0.020751633986928104	getColumnDimension()>nRows	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][],boolean#112	0.0	0.08863920099875156	0.01772784019975031	d[0].length>nRows	_
org.apache.commons.math3.linear.AbstractRealMatrix#double#walkInOptimizedOrder#?,RealMatrixPreservingVisitor#873	0.0	0.0863013698630137	0.01726027397260274	walkInRowOrder(visitor)!=0	_
org.apache.commons.math3.optimization.SimpleValueChecker#boolean#converged#?,int,PointValuePair,PointValuePair#79	0.0	0.037037037037037035	0.007407407407407408	FastMath.abs(p - c)>p	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1799	0.0	0.015036965874441335	0.003007393174888267	c<sinEpsA	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarAdd#?,double#113	0.0	0.013888888888888895	0.002777777777777779	getColumnDimension()<rowCount	_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1274	0.0	0.008555946382736001	0.0017111892765472002	lnza * epsilon + 0.19999954120254515>=x	_
org.apache.commons.math3.util.FastMath#double#cosQ#?,double,double#1820	0.0	0.006426202321724709	0.0012852404643449418	-(a - pi2a + xa)>pi2b	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextGaussian#?#106	0.0	0.0064102564102564005	0.00128205128205128	r * FastMath.sin(alpha)>alpha	_
org.apache.commons.math3.linear.MatrixUtils#void#checkAdditionCompatible#?,AnyMatrix,AnyMatrix#506	0.0	0.005692599620493358	0.0011385199240986717	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#add#?,RealMatrix#82	0.0	0.005263157894736831	0.0010526315789473662	getColumnDimension()>=rowCount	_
org.apache.commons.math3.util.FastMath#double#sqrt#?,double#375	0.0	0.0045376090471021	9.0752180942042E-4	Math.sqrt(a)<=0	_
org.apache.commons.math3.util.FastMath#double#log#?,double#1096	0.0	0.004233932378921717	8.467864757843434E-4	log(x,null)<0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#getEntry#?,int,int#304	0.0	0.004229756788984633	8.459513577969267E-4	data[row][column]<0	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2291	0.0	0.003526194588370753	7.052389176741506E-4	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#polyCosine#?,double#1677	0.0	0.00315068493150685	6.3013698630137E-4	p * x2 + 0.041666666666621166<x	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#double#getRelativeThreshold#?#85	0.0	0.00285714285714286	5.71428571428572E-4	relativeThreshold>=0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#283	0.0	0.0025195570456161744	5.039114091232349E-4	subMatrix[0].length==nRows	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#331	0.0	0.0023678586861936085	4.7357173723872173E-4	Double.doubleToLongBits(y)==xInt	_
org.apache.commons.math3.util.FastMath#double#max#?,double,double#3510	0.0	0.0023135561597100057	4.627112319420012E-4	!(a < b)	_
org.apache.commons.math3.util.FastMath#long#abs#?,long#2974	0.0	0.0022367013517455995	4.473402703491199E-4	(x < 0l) ? -x : x==0	_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2236	0.0	0.00195409532010731	3.90819064021462E-4	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#polySine#?,double#1657	0.0	0.0018086935895155077	3.6173871790310156E-4	p * x2 + 0.008333333333329196<=x	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#96	0.0	0.0017368649587494592	3.473729917498919E-4	equals(x,y,eps)	_
org.apache.commons.math3.util.Incrementor#int#getMaximalCount#?#105	0.0	0.001680672268907564	3.3613445378151283E-4	maximalCount!=0	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemB#?#3839	0.0	0.0014203894616265748	2.8407789232531497E-4	finalRemB>0	_
org.apache.commons.math3.linear.EigenDecomposition#?#EigenDecomposition#?,RealMatrix#116	0.0	0.0012195121951219523	2.4390243902439046E-4	isSymmetric(matrix,false)	_
org.apache.commons.math3.linear.EigenDecomposition#boolean#isSymmetric#?,RealMatrix,boolean#195	0.0	0.0012195121951219523	2.4390243902439046E-4	!(i < rows)	_
org.apache.commons.math3.linear.TriDiagonalTransformer#?#TriDiagonalTransformer#?,RealMatrix#63	0.0	8.503401360544227E-4	1.7006802721088456E-4	!(!matrix.isSquare())	_
org.apache.commons.math3.util.FastMath#double#abs#?,double#2992	0.0	6.588042601324098E-4	1.3176085202648197E-4	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x==0	_
org.apache.commons.math3.linear.ArrayRealVector#double#getEntry#?,int#600	0.0	4.947433518862083E-4	9.894867037724166E-5	data[index]>0	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#double#computeObjectiveValue#?,double[]#99	0.0	3.7023324694557275E-4	7.404664938911456E-5	function.value(point)>0	_
org.apache.commons.math3.linear.ArrayRealVector#int#getDimension#?#610	0.0	2.2296544035673924E-5	4.459308807134785E-6	data.length>0	_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#68	0.0	1.2284106822592865E-5	2.456821364518573E-6	!(rowDimension < 1)	_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#264	0.0	8.701648744896193E-6	1.7403297489792387E-6	!(o == null)	_
org.apache.commons.math3.util.Incrementor#void#incrementCount#?#155	0.0	7.644324853228746E-6	1.5288649706457492E-6	!(++count > maximalCount)	_
org.apache.commons.math3.util.FastMath#int#min#?,int,int#3396	0.0	7.439313797695438E-6	1.4878627595390876E-6	(a <= b) ? a : b!=0	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#92	0.0	0.0	0.0	absoluteThreshold>0	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#242	0.0	0.0	0.0	mtNext!=y	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getColumnDimension#?#341	0.0	0.0	0.0	((data == null) || (data[0] == null)) ? 0 : data[0].length>0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateBD#?,double#768	0.0	0.0	0.0	ccov1 + ccovmu + negccov > 0 && (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#eye#?,int,int#1196	0.0	0.0	0.0	r < m	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#randn1#?,int,int#1352	0.0	0.0	0.0	r < size	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#537	0.0	0.0	0.0	!(i < nCols)	_
org.apache.commons.math3.linear.MatrixUtils#void#checkSubtractionCompatible#?,AnyMatrix,AnyMatrix#523	0.0	0.0	0.0	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.util.FastMath$CodyWaite#?#CodyWaite#?,double,double#3808	0.0	0.0	0.0	remA > 0	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#402	0.0	0.0	0.0	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealDiagonalMatrix#?,double[]#217	0.0	0.0	0.0	i < diagonal.length	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getRowDimension#?#335	0.0	0.0	0.0	(data == null) ? 0 : data.length>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#inverse#?,int[]#1315	0.0	0.0	0.0	!(i < indices.length)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#diag#?,RealMatrix#1146	0.0	0.0	0.0	m.getColumnDimension() == 1	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#int#getMaxEvaluations#?#72	0.0	0.0	0.0	evaluations.getMaximalCount()!=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,double[]#1292	0.0	0.0	0.0	max>=0	_
org.apache.commons.math3.util.FastMath$CodyWaite#int#getK#?#3827	0.0	0.0	0.0	finalK>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1240	0.0	0.0	0.0	!(r < size)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#times#?,RealMatrix,RealMatrix#1072	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#reverse#?,int[]#1327	0.0	0.0	0.0	i < indices.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#divide#?,RealMatrix,RealMatrix#1087	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQ#?#86	0.0	0.0	0.0	cachedQ == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1055	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#PointValuePair#optimizeInternal#?,int,MultivariateFunction,GoalType,double[]#128	0.0	0.0	0.0	!(f == null)	_
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#double#end#?#41	0.0	0.0	0.0	0>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#log#?,RealMatrix#1026	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#418	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int,MaxCountExceededCallback#81	0.0	0.0	0.0	!(cb == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#ones#?,int,int#1182	0.0	0.0	0.0	r < n	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#boolean#updateEvolutionPaths#?,RealMatrix,RealMatrix#646	0.0	0.0	0.0	hsig	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getD#?#252	0.0	0.0	0.0	!(Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) > 0)	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createColumnRealMatrix#?,double[]#344	0.0	0.0	0.0	i < nRows	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextDouble#?#87	0.0	0.0	0.0	(high | low) * 0x1.0p-52d!=0	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,double[][]#130	0.0	0.0	0.0	!(data == null || data[0] == null)	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemA#?#3833	0.0	0.0	0.0	finalRemA>0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#copyColumn#?,RealMatrix,int,RealMatrix,int#1170	0.0	0.0	0.0	!(i < m1.getRowDimension())	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#98	0.0	0.0	0.0	cachedQt == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,RealMatrix#1254	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,double[]#1302	0.0	0.0	0.0	!(min > m[r])	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sqrt#?,RealMatrix#1042	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sumRows#?,RealMatrix#1132	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getV#?#226	0.0	0.0	0.0	!(k < m)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#sortedIndices#?,double[]#825	0.0	0.0	0.0	dis[i].index<=i	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#522	0.0	0.0	0.0	getRowDimension()>=column	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#triu#?,RealMatrix,int#1117	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,RealMatrix#1273	0.0	0.0	0.0	min > e	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#selectColumns#?,RealMatrix,int[]#1102	0.0	0.0	0.0	c < cols.length	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMultiplicationCompatible#?,AnyMatrix,AnyMatrix#541	0.0	0.0	0.0	!(left.getColumnDimension() != right.getRowDimension())	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#copyOut#?#527	0.0	0.0	0.0	i < nRows	_
