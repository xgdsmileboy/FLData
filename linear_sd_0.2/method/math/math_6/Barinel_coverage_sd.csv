line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#?#MultiDirectionalSimplex#?,double[],double,double#117	1.0	1.0	1.0	khi>=gamma	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#updateBD#?,double#787	1.0	1.0	1.0	max(diagD) / 1e14 - min(diagD)<negccov	_
org.apache.commons.math3.optim.univariate.BracketFinder#void#search#?,UnivariateFunction,GoalType,double,double#181	1.0	1.0	1.0	eval(func,w)<=val	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#diag#?,RealMatrix#1110	1.0	1.0	1.0	i < m.getColumnDimension()	_
org.apache.commons.math3.optim.BaseOptimizer#int#getIterations#?#93	0.9375	0.9375	0.9375	iterations.getCount()>=0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#double#max#?,double[]#1250	0.9090909090909091	1.0	0.9272727272727272	max<0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#double#max#?,RealMatrix#1214	0.9090909090909091	1.0	0.9272727272727272	!(max < e)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#initializeCMA#?,double[]#609	0.9090909090909091	1.0	0.9272727272727272	(1 + 2 * Math.max(0,Math.sqrt((mueff - 1) / (dimension + 1)) - 1)) * Math.max(0.3,1 - dimension / (1e-6 + maxIterations)) + cs<=sumwq	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction#double#penalty#?,double[],double[]#971	0.9090909090909091	1.0	0.9272727272727272	isMinimize ? penalty : -penalty<0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#double#min#?,double[]#1264	0.9090909090909091	1.0	0.9272727272727272	min<=0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1177	0.9090909090909091	1.0	0.9272727272727272	mat.getRowDimension()<n	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#double#min#?,RealMatrix#1231	0.9090909090909091	1.0	0.9272727272727272	!(min > e)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction#double#value#?,double[]#910	0.9090909090909091	1.0	0.9272727272727272	isMinimize ? value : -value<=0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex#int#compareTo#?,DoubleIndex#850	0.9090909090909091	1.0	0.9272727272727272	Double.compare(value,o.value)==0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#733	0.9047619047619048	1.0	0.9238095238095239	(1 - negminresidualvariance) / square(arnormsInv).multiply(weights).getEntry(0,0)>=oldFac	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#sqrt#?,RealMatrix#998	0.9090909090909091	0.9090909090909091	0.9090909090909092	c < m.getColumnDimension()	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1014	0.9090909090909091	0.9090909090909091	0.9090909090909092	e * e==e	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#copyColumn#?,RealMatrix,int,RealMatrix,int#1127	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(i < m1.getRowDimension())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#times#?,RealMatrix,RealMatrix#1028	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(c < m.getColumnDimension())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#ones#?,int,int#1139	0.9090909090909091	0.9090909090909091	0.9090909090909092	r < n	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#randn1#?,int,int#1311	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(c < popSize)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#int[]#sortedIndices#?,double[]#818	0.9090909090909091	0.9090909090909091	0.9090909090909092	i < doubles.length	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1200	0.9090909090909091	0.9090909090909091	0.9090909090909092	step>=start	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#boolean#updateEvolutionPaths#?,RealMatrix,RealMatrix#656	0.9090909090909091	0.9090909090909091	0.9090909090909092	hsig	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#eye#?,int,int#1153	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(r < n)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#selectColumns#?,RealMatrix,int[]#1057	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(r < m.getRowDimension())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction#double[]#repair#?,double[]#951	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(x[i] > uB[i])	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#push#?,double[],double#805	0.9090909090909091	0.9090909090909091	0.9090909090909092	vals[i - 1]<=val	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#log#?,RealMatrix#983	0.9090909090909091	0.9090909090909091	0.9090909090909092	!(r < m.getRowDimension())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#triu#?,RealMatrix,int#1072	0.9047619047619048	0.9047619047619048	0.9047619047619049	!(r < m.getRowDimension())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#int[]#inverse#?,int[]#1273	0.9047619047619048	0.9047619047619048	0.9047619047619049	i < indices.length	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#sumRows#?,RealMatrix#1088	0.9047619047619048	0.9047619047619048	0.9047619047619049	!(r < m.getRowDimension())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#int[]#reverse#?,int[]#1286	0.9047619047619048	0.9047619047619048	0.9047619047619049	indices[indices.length - i - 1]!=i	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#divide#?,RealMatrix,RealMatrix#1042	0.9047619047619048	0.9047619047619048	0.9047619047619049	r < m.getRowDimension()	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#checkParameters#?#560	0.8695652173913043	0.9090909090909091	0.8774703557312253	!(i < init.length)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#parseOptimizationData#?,OptimizationData#535	0.8333333333333334	0.8333333333333334	0.8333333333333335	data instanceof Sigma	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize#int#getPopulationSize#?#338	0.8333333333333334	0.8333333333333334	0.8333333333333335	lambda>0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#?#MultiDirectionalSimplex#?,double[]#101	1.0	0.0	0.8		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize#?#PopulationSize#?,int#328	0.7407407407407407	0.7407407407407407	0.7407407407407407	!(size <= 0)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction#?#FitnessFunction#?#893	0.9090909090909091	0.0	0.7272727272727273		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#zeros#?,int,int#1167	0.9090909090909091	0.0	0.7272727272727273		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction#void#setValueRange#?,double#936	0.9090909090909091	0.0	0.7272727272727273		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex#?#DoubleIndex#?,double,int#844	0.9090909090909091	0.0	0.7272727272727273		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#PointValuePair#doOptimize#?#514	0.9090909090909091	0.0	0.7272727272727273		GT
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#?#CMAESOptimizer#?,int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>#235	0.7142857142857143	0.76	0.7234285714285715	diagonalOnly<=checkFeasableCount	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma#?#Sigma#?,double[]#292	0.7407407407407407	0.7407407407407407	0.7195767195767196	!(s[i] < 0)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#void#iterate#?,MultivariateFunction,Comparator<PointValuePair>#168	0.6666666666666667	0.8	0.6933333333333335	!(comparator.compare(reflected,expanded) <= 0)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma#double[]#getSigma#?#304	0.8333333333333334	0.0	0.6666666666666667		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#void#setPoints#?,PointValuePair[]#325	0.6666666666666667	0.6666666666666667	0.6666666666666667	!(points.length != simplex.length)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PointValuePair#doOptimize#?#255	0.5	1.0	0.6000000000000001	!(t < 0.0)	GT
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#PointValuePair#optimize#?,OptimizationData#363	0.7407407407407407	0.0	0.5925925925925926		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#PointValuePair#evaluateNewSimplex#?,MultivariateFunction,PointValuePair[],double,Comparator<PointValuePair>#206	0.5714285714285714	0.6	0.5771428571428572	xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j])>coeff	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createColumnRealMatrix#?,double[]#338	0.4878048780487805	0.625	0.5152439024390244	!(columnData == null)	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#add#?,RealMatrix#82	0.4545454545454546	0.7407407407407407	0.5117845117845119	getColumnDimension()!=rowCount	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarAdd#?,double#113	0.47619047619047616	0.6451612903225806	0.5099846390168971	getColumnDimension()<rowCount	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#467	0.4545454545454546	0.5882352941176471	0.48128342245989314	getRowDimension()!=column	_
org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#double#computeObjectiveValue#?,double[]#116	0.375	0.8333333333333334	0.46666666666666673	function.value(params)<0	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getD#?#228	0.4418604651162791	0.5428571428571429	0.4620598006644519	!(Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) > 0)	_
org.apache.commons.math3.optim.SimpleBounds#SimpleBounds#unbounded#?,int#73	0.5294117647058824	0.0	0.42352941176470593		_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#void#checkParameters#?#148	0.41666666666666663	0.4444444444444444	0.4222222222222222	upperBound[i]>v	_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,int[]#183	0.3846153846153846	0.5333333333333333	0.4143589743589744	mt[N - 1]>=k	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getV#?#202	0.39583333333333337	0.475	0.41166666666666674	!(k < m)	_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,int#146	0.3846153846153846	0.5	0.4076923076923077	(int)longMT==seed	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#256	0.3278688524590164	0.72	0.4062950819672131	y >>> 11<=bits	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#522	0.3877551020408163	0.46341463414634143	0.4028870084619214	getRowDimension()>=column	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#void#setPoint#?,int,PointValuePair#311	0.4	0.4	0.4000000000000001	!(index < 0 || index >= simplex.length)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#?#PowellOptimizer#?,double,double,double,double#168	0.5	0.0	0.4		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#double[][]#newPointAndDirection#?,double[],double[],double#288	0.25	1.0	0.4	p[i] + nD[i]==optimum	_
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#645	0.4193548387096774	0.736842105263158	0.3909604519774012	p / q>maxAbsoluteValue	_
org.apache.commons.math3.linear.AbstractRealMatrix#double#getFrobeniusNorm#?#280	0.47619047619047616	0.0	0.38095238095238093		_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#121	0.31666666666666665	0.6111111111111112	0.3755555555555556	beta * hK[i]<=inv	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#?#NelderMeadSimplex#?,double[],double,double,double,double#144	0.36363636363636365	0.36363636363636365	0.3636363636363637	sigma!=rho	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#?#AbstractSimplex#?,double[]#98	0.36363636363636365	0.36363636363636365	0.3636363636363637	!(steps == null)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#?#PowellOptimizer#?,double,double,double,double,ConvergenceChecker<PointValuePair>#131	0.19999999999999996	1.0	0.36	abs>=lineAbs	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextGaussian#?#110	0.3278688524590164	0.4878048780487805	0.35985605757696926	r * FastMath.cos(alpha)>alpha	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealDiagonalMatrix#?,double[]#216	0.34545454545454546	0.4042553191489362	0.3572147001934236	!(i < diagonal.length)	_
org.apache.commons.math3.linear.MatrixUtils#void#checkAdditionCompatible#?,AnyMatrix,AnyMatrix#571	0.3389830508474576	0.42553191489361697	0.3562928236566895	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.linear.TriDiagonalTransformer#void#transform#?#224	0.30645161290322576	0.5135135135135135	0.3478639930252833	hIJ * hK[j]>xNormSqr	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#updateCovarianceDiagonalOnly#?,boolean,RealMatrix#679	0.33333333333333337	0.33333333333333337	0.33333333333333337	!(diagonalOnly > 1 && iterations > diagonalOnly)	_
org.apache.commons.math3.util.MathArrays#int[]#copyOf#?,int[],int#763	0.41666666666666663	0.0	0.3333333333333333		_
org.apache.commons.math3.optim.SimpleValueChecker#boolean#converged#?,int,PointValuePair,PointValuePair#123	0.23076923076923073	0.7	0.3246153846153846	FastMath.abs(p - c)>p	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#void#evaluate#?,MultivariateFunction,Comparator<PointValuePair>#250	0.2962962962962963	0.4	0.31703703703703706	!(Double.isNaN(vertex.getValue()))	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#562	0.303030303030303	0.37037037037037035	0.3164983164983165	!(i < nRows)	_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#void#parseOptimizationData#?,OptimizationData#94	0.3921568627450981	0.3921568627450981	0.3137254901960785		_
org.apache.commons.math3.optim.SimpleBounds#double[]#getLower#?#53	0.3921568627450981	0.0	0.3137254901960785		_
org.apache.commons.math3.optim.SimpleBounds#double[]#getUpper#?#61	0.3921568627450981	0.0	0.3137254901960785		_
org.apache.commons.math3.random.MersenneTwister#?#MersenneTwister#?#107	0.3846153846153846	0.0	0.3076923076923077		_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,long#216	0.3846153846153846	0.0	0.3076923076923077		_
org.apache.commons.math3.optim.SimpleBounds#?#SimpleBounds#?,double[],double[]#44	0.3846153846153846	0.0	0.3076923076923077		_
org.apache.commons.math3.optim.univariate.BracketFinder#double#getHi#?#245	0.125	1.0	0.30000000000000004	hi<=0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#PointValuePair#doOptimize#?#165	0.3076923076923077	0.3076923076923077	0.2985754985754986	converged	GT
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#PointValuePair#getPoint#?,int#296	0.2962962962962963	0.2962962962962963	0.2962962962962963	!(index < 0 || index >= simplex.length)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#int#getDimension#?#183	0.2962962962962963	0.2962962962962963	0.2962962962962963	dimension!=0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#int#getSize#?#194	0.2962962962962963	0.2962962962962963	0.2962962962962963	simplex.length!=0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#void#build#?,double[]#229	0.2962962962962963	0.2962962962962963	0.2962962962962963	!(k < dimension)	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#?#NelderMeadSimplex#?,double[]#121	0.36363636363636365	0.0	0.29090909090909095		_
org.apache.commons.math3.optim.PointValuePair#double[]#getPoint#?#70	0.3571428571428571	0.0	0.2857142857142857		_
org.apache.commons.math3.linear.MatrixUtils#boolean#isSymmetricInternal#?,RealMatrix,double,boolean#401	0.26388888888888884	0.3584905660377359	0.2828092243186583	matrix.getEntry(j,i)<=relativeTolerance	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#void#checkParameters#?#216	0.27586206896551724	0.2962962962962963	0.279948914431673	!(getLowerBound() != null || getUpperBound() != null)	_
org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#void#parseOptimizationData#?,OptimizationData#90	0.3448275862068966	0.3448275862068966	0.27949183303085307	data instanceof ObjectiveFunction	_
org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction#MultivariateFunction#getObjectiveFunction#?#45	0.3448275862068966	0.0	0.2758620689655173		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#void#parseOptimizationData#?,OptimizationData#197	0.27586206896551724	0.27586206896551724	0.27586206896551724	data instanceof AbstractSimplex	_
org.apache.commons.math3.linear.EigenDecomposition#?#EigenDecomposition#?,RealMatrix#121	0.2676056338028169	0.3015873015873016	0.26572286572286574	isSymmetric	_
org.apache.commons.math3.analysis.function.Sinc#double#value#?,double#90	0.07692307692307687	1.0	0.2615384615384615	scaledX * scaledX>scaledX	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#PointValuePair#doOptimize#?#236	0.08333333333333337	1.0	0.2615384615384615	solver.getEvaluations()==n	GT
org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction#?#ObjectiveFunction#?,MultivariateFunction#36	0.32258064516129037	0.0	0.2580645161290323		_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQ#?#86	0.25	0.27941176470588236	0.2558823529411765	cachedQ == null	_
org.apache.commons.math3.util.FastMath#double#atan#?,double#2423	0.2222222222222222	0.38095238095238093	0.25396825396825395	atan(x,0.0,false)<0	_
org.apache.commons.math3.optim.univariate.BrentOptimizer#UnivariatePointValuePair#doOptimize#?#268	0.19999999999999996	1.0	0.25	w==e	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#subtract#?,RealMatrix#99	0.17391304347826086	0.5263157894736843	0.24439359267734556	getColumnDimension()<rowCount	_
org.apache.commons.math3.linear.TriDiagonalTransformer#?#TriDiagonalTransformer#?,RealMatrix#63	0.240506329113924	0.2676056338028169	0.24352112676056342	!(!matrix.isSquare())	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#PointValuePair[]#getPoints#?#286	0.2962962962962963	0.0	0.23703703703703705		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#void#iterate#?,MultivariateFunction,Comparator<PointValuePair>#257	0.2222222222222222	0.33333333333333337	0.23492063492063492	centroid[j] - gamma * (centroid[j] - xWorst[j])<scaling	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#multiply#?,RealMatrix#145	0.15037593984962405	0.5714285714285714	0.2345864661654135	getColumnDimension()<nRows	_
org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#GoalType#getGoalType#?#101	0.28037383177570097	0.0	0.22429906542056077		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#?#SimplexOptimizer#?,double,double#105	0.28	0.0	0.22400000000000003		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#?#SimplexOptimizer#?,ConvergenceChecker<PointValuePair>#97	0.27586206896551724	0.0	0.2206896551724138		_
org.apache.commons.math3.optim.PointValuePair#double[]#getPointRef#?#80	0.27586206896551724	0.0	0.2206896551724138		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer#PointValuePair#optimize#?,OptimizationData#122	0.27586206896551724	0.0	0.2206896551724138		_
org.apache.commons.math3.optim.PointValuePair#?#PointValuePair#?,double[],double#44	0.2702702702702703	0.0	0.21621621621621623		_
org.apache.commons.math3.optim.PointValuePair#?#PointValuePair#?,double[],double,boolean#58	0.2702702702702703	0.0	0.21621621621621623		_
org.apache.commons.math3.linear.EigenDecomposition#void#transformToTridiagonal#?,RealMatrix#561	0.2676056338028169	0.0	0.2140845070422535		_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#97	0.18999999999999995	0.296875	0.21137499999999998	0>=0	_
org.apache.commons.math3.linear.TriDiagonalTransformer#double[]#getSecondaryDiagonalRef#?#185	0.26388888888888884	0.0	0.21111111111111108		_
org.apache.commons.math3.linear.TriDiagonalTransformer#double[]#getMainDiagonalRef#?#175	0.26388888888888884	0.0	0.21111111111111108		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#void#checkParameters#?#376	0.19999999999999996	0.25	0.20999999999999996	!(getLowerBound() != null || getUpperBound() != null)	_
org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#PointValuePair#optimize#?,OptimizationData#64	0.25210084033613445	0.0	0.20168067226890757		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#?#PowellOptimizer#?,double,double#151	0.25	0.0	0.2		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#?#PowellOptimizer#?,double,double,ConvergenceChecker<PointValuePair>#101	0.25	0.0	0.2		_
org.apache.commons.math3.linear.MatrixUtils#boolean#isSymmetric#?,RealMatrix,double#439	0.25	0.0	0.2		_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch#UnivariatePointValuePair#search#?,double[],double[]#358	0.25	0.0	0.2		_
org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer#?#MultivariateOptimizer#?,ConvergenceChecker<PointValuePair>#43	0.25	0.0	0.2		_
org.apache.commons.math3.optim.univariate.BracketFinder#double#getMid#?#261	0.16666666666666663	0.33333333333333337	0.19999999999999998	mid<0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex#void#replaceWorstPoint#?,PointValuePair,Comparator<PointValuePair>#269	0.19999999999999996	0.19999999999999996	0.19999999999999996	!(comparator.compare(simplex[i],pointValuePair) > 0)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#walkInRowOrder#?,RealMatrixPreservingVisitor#419	0.10416666666666663	0.5555555555555556	0.19444444444444442	visitor.end()>0	_
org.apache.commons.math3.linear.AbstractRealMatrix#double#walkInOptimizedOrder#?,RealMatrixPreservingVisitor#873	0.10362694300518138	0.5555555555555556	0.19401266551525623	walkInRowOrder(visitor)!=0	_
org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker#boolean#converged#?,int,UnivariatePointValuePair,UnivariatePointValuePair#125	0.16666666666666663	0.19999999999999996	0.17333333333333328	FastMath.abs(p - c)>c	_
org.apache.commons.math3.optim.SimpleValueChecker#?#SimpleValueChecker#?,double,double#66	0.2142857142857143	0.0	0.17142857142857146		_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarMultiply#?,double#127	0.11904761904761907	0.38	0.17123809523809527	getColumnDimension()==rowCount	_
org.apache.commons.math3.optim.univariate.BracketFinder#double#eval#?,UnivariateFunction,double#285	0.125	0.33333333333333337	0.16666666666666669	f.value(x)<0	_
org.apache.commons.math3.util.Incrementor#int#getCount#?#114	0.11952191235059761	0.32608695652173914	0.16083492118482592	count<=0	_
org.apache.commons.math3.optim.BaseOptimizer#int#getEvaluations#?#72	0.1568627450980392	0.17391304347826086	0.16027280477408354	evaluations.getCount()>0	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch#?#LineSearch#?,double,double#330	0.19999999999999996	0.0	0.15999999999999998		_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1220	0.1063829787234043	0.37037037037037035	0.15653495440729487	aa + tmp - tmp<aa	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][],boolean#112	0.07117437722419928	0.5	0.15460750853242322	d[0].length>nRows	_
org.apache.commons.math3.linear.MatrixUtils#void#checkSubtractionCompatible#?,AnyMatrix,AnyMatrix#588	0.14598540145985406	0.17699115044247793	0.15218655125637884	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.optim.MaxEval#int#getMaxEval#?#49	0.1515151515151515	0.1515151515151515	0.1515151515151515	maxEval>0	_
org.apache.commons.math3.optim.MaxEval#?#MaxEval#?,int#36	0.1507537688442211	0.1507537688442211	0.1507537688442211	!(max <= 0)	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextDouble#?#92	0.13605442176870752	0.19999999999999996	0.14884353741496603	(high | low) * 0x1.0p-52d>0	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#transpose#?#599	0.10471204188481675	0.32258064516129037	0.1482857625401115	getColumnDimension()<nRows	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2334	0.14084507042253525	0.17543859649122806	0.1477637756362738	sinQ(xa,xb)>0	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#537	0.125	0.20430107526881724	0.14086021505376345	i < nCols	_
org.apache.commons.math3.optim.BaseOptimizer#ConvergenceChecker<PAIR>#getConvergenceChecker#?#102	0.17441860465116277	0.0	0.13953488372093023		_
org.apache.commons.math3.util.FastMath#double#atan#?,double,double,boolean#2477	0.11111111111111116	0.2857142857142857	0.13888888888888895	1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]))>temp	_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#double[]#getStartPoint#?#109	0.17341040462427748	0.0	0.13872832369942198		_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#double[]#getUpperBound#?#121	0.17341040462427748	0.0	0.13872832369942198		_
org.apache.commons.math3.optim.AbstractConvergenceChecker#?#AbstractConvergenceChecker#?,double,double#46	0.10752688172043012	0.2571428571428571	0.13745007680491553	relativeThreshold>absoluteThreshold	_
org.apache.commons.math3.optim.AbstractConvergenceChecker#double#getRelativeThreshold#?#54	0.1333333333333333	0.1515151515151515	0.13696969696969694	relativeThreshold>=0	_
org.apache.commons.math3.optim.BaseOptimizer#void#parseOptimizationData#?,OptimizationData#191	0.1515151515151515	0.1515151515151515	0.13649772056851703	data instanceof MaxEval	_
org.apache.commons.math3.optim.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#61	0.1351351351351351	0.1351351351351351	0.1351351351351351	absoluteThreshold>0	_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#double[]#getLowerBound#?#115	0.16759776536312854	0.0	0.13407821229050285		_
org.apache.commons.math3.optim.BaseOptimizer#void#incrementEvaluationCount#?#162	0.16393442622950816	0.0	0.13114754098360654		_
org.apache.commons.math3.optim.InitialGuess#double[]#getInitialGuess#?#45	0.1630434782608695	0.0	0.13043478260869562		_
org.apache.commons.math3.optim.InitialGuess#?#InitialGuess#?,double[]#36	0.16216216216216217	0.0	0.12972972972972974		_
org.apache.commons.math3.optim.univariate.BracketFinder#double#getLo#?#229	0.125	0.125	0.125	lo!=0	_
org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker#?#SimpleUnivariateValueChecker#?,double,double#69	0.1428571428571429	0.0	0.11428571428571432		_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#PAIR#optimize#?,OptimizationData#66	0.14218009478672988	0.0	0.11374407582938391		_
org.apache.commons.math3.optim.univariate.BracketFinder#?#BracketFinder#?,double,int#91	0.11111111111111116	0.11111111111111116	0.11111111111111116	!(growLimit <= 0)	_
org.apache.commons.math3.optim.BaseMultivariateOptimizer#?#BaseMultivariateOptimizer#?,ConvergenceChecker<PAIR>#48	0.13888888888888884	0.0	0.11111111111111108		_
org.apache.commons.math3.optim.BaseOptimizer#PAIR#optimize#?,OptimizationData#143	0.13761467889908252	0.0	0.11009174311926602		_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2280	0.10447761194029848	0.13124999999999998	0.10983208955223878	-cosQ(xa,xb)!=0	_
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#double#end#?#41	0.10050251256281406	0.12578616352201255	0.10555924275465377	0>=0	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,int,int#81	0.1298701298701299	0.0	0.10389610389610393		_
org.apache.commons.math3.optim.BaseOptimizer#?#BaseOptimizer#?,ConvergenceChecker<PAIR>#51	0.1298701298701299	0.0	0.10389610389610393		GT
org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#double#getPoint#?#56	0.0625	0.25	0.1	point==0	_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#double#getMax#?#134	0.05882352941176472	0.25	0.09705882352941178	max<0	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1730	0.06034482758620685	0.24691358024691357	0.09503488996242618	polyCosine(epsilon)>=costB	_
org.apache.commons.math3.optim.univariate.SearchInterval#double#getMax#?#86	0.05555555555555558	0.25	0.09444444444444447	upper<=0	_
org.apache.commons.math3.optim.univariate.BracketFinder#?#BracketFinder#?#79	0.11111111111111116	0.0	0.08888888888888893		_
org.apache.commons.math3.util.Pair#V#getValue#?#74	0.10909090909090913	0.0	0.08727272727272731		_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#double#getStartValue#?#122	0.05882352941176472	0.16666666666666663	0.0803921568627451	start<0	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemB#?#3862	0.07342657342657344	0.10552763819095479	0.07984678637944971	finalRemB>0	_
org.apache.commons.math3.optim.univariate.SearchInterval#double#getStartValue#?#94	0.05555555555555558	0.16666666666666663	0.07777777777777779	start<0	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#double#findUpperBound#?,UnivariateFunction,double,double#336	0.07692307692307687	0.07692307692307687	0.07692307692307687	b>0	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$LineSearchFunction#double#value#?,double#389	0.07692307692307687	0.07692307692307687	0.07692307692307687	!(i < gradient.length)	_
org.apache.commons.math3.util.FastMath$CodyWaite#?#CodyWaite#?,double#3831	0.07342657342657344	0.08974358974358976	0.07668997668997671	remA > 0	_
org.apache.commons.math3.util.FastMath$CodyWaite#int#getK#?#3850	0.07342657342657344	0.08974358974358976	0.07668997668997671	finalK!=0	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemA#?#3856	0.07342657342657344	0.08974358974358976	0.07668997668997671	finalRemA>=0	_
org.apache.commons.math3.util.FastMath#double#cosQ#?,double,double#1845	0.060518731988472574	0.13461538461538458	0.07533806251385497	-(a - pi2a + xa)>pi2b	_
org.apache.commons.math3.linear.AbstractRealMatrix#boolean#isSquare#?#616	0.09178743961352653	0.0	0.07342995169082123		_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#?#NonLinearConjugateGradientOptimizer#?,Formula,ConvergenceChecker<PointValuePair>#71	0.09090909090909094	0.0	0.07272727272727275		_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#void#checkParameters#?#402	0.0714285714285714	0.07692307692307687	0.07252747252747249	!(getLowerBound() != null || getUpperBound() != null)	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#void#parseOptimizationData#?,OptimizationData#308	0.0714285714285714	0.0714285714285714	0.0714285714285714	!(data instanceof BracketingStep)	_
org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#void#parseOptimizationData#?,OptimizationData#95	0.0714285714285714	0.0714285714285714	0.0714285714285714	data instanceof ObjectiveFunctionGradient	_
org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#?#UnivariatePointValuePair#?,double,double#46	0.05882352941176472	0.11111111111111116	0.06928104575163402	point<value	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMultiplicationCompatible#?,AnyMatrix,AnyMatrix#606	0.06153846153846154	0.09174311926605505	0.06757939308398025	!(left.getColumnDimension() != right.getRowDimension())	_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#double#getMin#?#128	0.05882352941176472	0.09999999999999998	0.06705882352941178	min<0	_
org.apache.commons.math3.util.FastMath#int#max#?,int,int#3489	0.06472491909385114	0.0757575757575758	0.06693145042659608	(a <= b) ? b : a>0	_
org.apache.commons.math3.util.FastMath#double#max#?,double,double#3548	0.05675146771037187	0.10661764705882348	0.0667247035800622	a!=0	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner#double[]#precondition#?,double[],double[]#346	0.08333333333333337	0.0	0.0666666666666667		_
org.apache.commons.math3.util.Pair#K#getKey#?#65	0.08241758241758246	0.0	0.06593406593406596		_
org.apache.commons.math3.linear.ArrayRealVector#double#getEntry#?,int#600	0.05654761904761907	0.09547738693467334	0.06433357262502992	data[index]<0	_
org.apache.commons.math3.optim.univariate.BrentOptimizer#UnivariatePointValuePair#best#?,UnivariatePointValuePair,UnivariatePointValuePair,boolean#311	0.0714285714285714	0.0714285714285714	0.06428571428571428	isMinim	_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#double#computeObjectiveValue#?,double#149	0.05882352941176472	0.08333333333333337	0.06372549019607845	function.value(x)<=0	_
org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#double#getValue#?#65	0.05882352941176472	0.08333333333333337	0.06372549019607845	value<0	_
org.apache.commons.math3.util.FastMath#double#polyCosine#?,double#1702	0.0557029177718833	0.09259259259259256	0.06308085273602515	p * x2 + 0.041666666666621166<=x	_
org.apache.commons.math3.optim.univariate.SearchInterval#double#getMin#?#78	0.05555555555555558	0.09090909090909094	0.06262626262626265	lower<0	_
org.apache.commons.math3.util.FastMath#double#polySine#?,double#1682	0.0557029177718833	0.08536585365853655	0.06163550494921395	p * x2 + 0.008333333333329196<=x	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$LineSearchFunction#?#LineSearchFunction#?,double[],double[]#373	0.07692307692307687	0.0	0.0615384615384615		_
org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#double[]#computeObjectiveGradient#?,double[]#54	0.07692307692307687	0.0	0.0615384615384615		_
org.apache.commons.math3.util.FastMath#double#log#?,double#1120	0.04683840749414525	0.11173184357541899	0.059817094710400004	log(x,null)<0	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,double#272	0.07392996108949412	0.0	0.0591439688715953		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#copyOut#?#531	0.05352112676056342	0.07539682539682535	0.0578962664878158	i < nRows	_
org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#PointValuePair#optimize#?,OptimizationData#74	0.0714285714285714	0.0	0.05714285714285712		_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#PointValuePair#optimize#?,OptimizationData#187	0.0714285714285714	0.0	0.05714285714285712		_
org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient#?#ObjectiveFunctionGradient#?,MultivariateVectorFunction#36	0.0714285714285714	0.0	0.05714285714285712		_
org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient#MultivariateVectorFunction#getObjectiveFunctionGradient#?#45	0.0714285714285714	0.0	0.05714285714285712		_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#?#NonLinearConjugateGradientOptimizer#?,Formula,ConvergenceChecker<PointValuePair>,UnivariateSolver,Preconditioner#164	0.0714285714285714	0.0	0.05714285714285712		_
org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer#?#GradientMultivariateOptimizer#?,ConvergenceChecker<PointValuePair>#44	0.0714285714285714	0.0	0.05714285714285712		_
org.apache.commons.math3.optim.univariate.SearchInterval#?#SearchInterval#?,double,double,double#49	0.05555555555555558	0.05555555555555558	0.05555555555555558	!(lo >= hi)	_
org.apache.commons.math3.random.BitsStreamGenerator#void#clear#?#195	0.0680272108843537	0.0	0.05442176870748297		_
org.apache.commons.math3.random.BitsStreamGenerator#?#BitsStreamGenerator#?#41	0.0680272108843537	0.0	0.05442176870748297		_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#void#parseOptimizationData#?,OptimizationData#111	0.05555555555555558	0.05555555555555558	0.0532163742690059	!(data instanceof GoalType)	_
org.apache.commons.math3.util.Pair#?#Pair#?,K,V#46	0.0665188470066519	0.0	0.053215077605321515		_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,double[][]#130	0.048223350253807085	0.06529209621993126	0.05163709944703192	!(data == null || data[0] == null)	_
org.apache.commons.math3.optim.univariate.BrentOptimizer#?#BrentOptimizer#?,double,double,ConvergenceChecker<UnivariatePointValuePair>#90	0.050000000000000044	0.052631578947368474	0.05052631578947373	rel>=abs	_
org.apache.commons.math3.linear.ArrayRealVector#int#getDimension#?#610	0.04749999999999999	0.05900621118012417	0.04980124223602483	data.length>0	_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#GoalType#getGoalType#?#77	0.05882352941176472	0.0	0.04705882352941178		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#RealMatrix#createMatrix#?,int,int#145	0.058651026392961825	0.0	0.04692082111436946		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#getEntry#?,int,int#307	0.037878787878787845	0.0826446280991735	0.04683195592286497	data[row][column]==0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#285	0.03853955375253548	0.07851239669421484	0.046534122340871356	subMatrix[0].length==nRows	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#getData#?#254	0.05475504322766567	0.0	0.043804034582132535		_
org.apache.commons.math3.util.Incrementor#void#incrementCount#?#155	0.04115226337448563	0.052816901408450745	0.043485190981278656	!(++count > maximalCount)	_
org.apache.commons.math3.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int#104	0.012499999999999956	0.16666666666666663	0.04333333333333329	(columns + BLOCK_SIZE - 1) / BLOCK_SIZE==rows	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#332	0.03281250000000002	0.07936507936507942	0.0421230158730159	Double.doubleToLongBits(y)==xInt	_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#UnivariatePointValuePair#optimize#?,OptimizationData#70	0.052631578947368474	0.0	0.042105263157894784		_
org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction#UnivariateFunction#getObjectiveFunction#?#45	0.052631578947368474	0.0	0.042105263157894784		_
org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction#?#UnivariateObjectiveFunction#?,UnivariateFunction#36	0.052631578947368474	0.0	0.042105263157894784		_
org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix#transpose#?#1237	0.02941176470588236	0.09090909090909094	0.04171122994652408	lInc==nRows	_
org.apache.commons.math3.linear.BlockRealMatrix#double[][]#createBlocksLayout#?,int,int#265	0.010309278350515427	0.16666666666666663	0.04158075601374567	FastMath.min(pStart + BLOCK_SIZE,rows)==blockColumns	_
org.apache.commons.math3.util.FastMath#long#abs#?,long#2999	0.03167420814479638	0.07633587786259544	0.04060654208835619	(x < 0l) ? -x : x<=0	_
org.apache.commons.math3.optim.BaseOptimizer#int#getMaxEvaluations#?#60	0.038461538461538436	0.04761904761904767	0.04029304029304029	evaluations.getMaximalCount()>0	_
org.apache.commons.math3.optim.univariate.UnivariateOptimizer#?#UnivariateOptimizer#?,ConvergenceChecker<UnivariatePointValuePair>#49	0.050000000000000044	0.0	0.040000000000000036		_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int,MaxCountExceededCallback#81	0.03764115432873272	0.04784688995215314	0.03968230145341681	!(cb == null)	_
org.apache.commons.math3.analysis.solvers.BrentSolver#double#doSolve#?#98	0.033333333333333326	0.0714285714285714	0.03777777777777778	initial>0	_
org.apache.commons.math3.linear.ArrayRealVector#?#ArrayRealVector#?,double[]#86	0.04481132075471694	0.0	0.035849056603773556		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getRowDimension#?#339	0.032733224222585955	0.045454545454545414	0.03527748846897785	(data == null) ? 0 : data.length>0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getColumnDimension#?#345	0.0326797385620915	0.04535147392290251	0.035214085634253704	((data == null) || (data[0] == null)) ? 0 : data[0].length!=0	_
org.apache.commons.math3.util.FastMath#int#min#?,int,int#3421	0.032258064516129004	0.04612159329140464	0.03503077027118413	(a <= b) ? a : b!=0	_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#71	0.032110091743119296	0.045454545454545414	0.03477898248540452	!(columnDimension < 1)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setEntry#?,int,int,double#315	0.043010752688172005	0.0	0.03440860215053761		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,int,int#62	0.04219409282700426	0.0	0.03375527426160341		_
org.apache.commons.math3.util.Incrementor#void#setMaximalCount#?,int#96	0.04149377593360992	0.0	0.03319502074688794		_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#483	0.029940119760479056	0.04201680672268904	0.032355457152921055	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#467	0.029895366218236186	0.04192872117400415	0.03230203720938978	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.util.Incrementor#void#resetCount#?#164	0.03968253968253965	0.0	0.03174603174603172		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][]#80	0.03869653767820769	0.0	0.030957230142566152		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#copyIn#?,double[][]#547	0.03853955375253548	0.0	0.030831643002028387		_
org.apache.commons.math3.analysis.solvers.BrentSolver#double#brent#?,double,double,double,double#222	0.02083333333333337	0.0625	0.0291666666666667	tol>c	_
org.apache.commons.math3.util.FastMath#double#sqrt#?,double#379	0.018502202643171817	0.06389776357827481	0.027581314830192417	Math.sqrt(a)<=0	_
org.apache.commons.math3.util.Incrementor#int#getMaximalCount#?#105	0.022222222222222254	0.04166666666666663	0.026111111111111134	maximalCount!=0	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMatrixIndex#?,AnyMatrix,int,int#455	0.03159557661927326	0.0	0.025276461295418606		_
org.apache.commons.math3.analysis.solvers.BrentSolver#?#BrentSolver#?#47	0.03125	0.0	0.025		_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#int#getEvaluations#?#106	0.02083333333333337	0.02777777777777779	0.022222222222222254	evaluations.getCount()!=0	_
org.apache.commons.math3.util.FastMath#double#abs#?,double#3017	0.01807980049875313	0.03444180522565321	0.021352201444133145	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x<=0	_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#264	0.01972386587771202	0.025445292620865145	0.020868151226342647	!(o == null)	_
org.apache.commons.math3.linear.BlockRealMatrix#double[][]#toBlocksLayout#?,double[][]#205	0.005681818181818232	0.06666666666666665	0.017853107344632725	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE==rows	_
org.apache.commons.math3.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int,double[][],boolean#155	0.005102040816326481	0.06666666666666665	0.017414965986394516	(columns + BLOCK_SIZE - 1) / BLOCK_SIZE==rows	_
org.apache.commons.math3.linear.BlockRealMatrix#double[]#operate#?,double[]#1276	0.01449275362318836	0.03703703703703709	0.017407407407407385	FastMath.min(qStart + BLOCK_SIZE,columns)==pEnd	_
org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat#getInstance#?,Locale#171	0.02083333333333337	0.0	0.016666666666666698		_
org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat#getInstance#?#162	0.02083333333333337	0.0	0.016666666666666698		_
org.apache.commons.math3.linear.RealVectorFormat#?#RealVectorFormat#?,NumberFormat#82	0.020000000000000018	0.0	0.016000000000000014		_
org.apache.commons.math3.util.MathArrays#double[]#copyOf#?,double[]#749	0.019607843137254943	0.0	0.015686274509803956		_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double#244	0.017699115044247815	0.0	0.014159292035398252		_
org.apache.commons.math3.linear.RealVectorFormat#?#RealVectorFormat#?,String,String,String,NumberFormat#108	0.017241379310344862	0.0	0.01379310344827589		_
org.apache.commons.math3.analysis.solvers.BrentSolver#?#BrentSolver#?,double#55	0.016129032258064502	0.0	0.012903225806451602		_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#getMin#?#112	0.00666666666666671	0.030303030303030276	0.011393939393939423	searchMin==0	_
org.apache.commons.math3.linear.RealMatrixFormat#?#RealMatrixFormat#?,String,String,String,String,String,String#115	0.013698630136986356	0.0	0.010958904109589086		_
org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat#getInstance#?#215	0.013698630136986356	0.0	0.010958904109589086		_
org.apache.commons.math3.linear.RealMatrixFormat#NumberFormat#getFormat#?#207	0.013157894736842146	0.0	0.010526315789473717		_
org.apache.commons.math3.util.MathArrays#double[]#copyOf#?,double[],int#779	0.012820512820512775	0.0	0.01025641025641022		_
org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat#getInstance#?,Locale#224	0.012195121951219523	0.0	0.009756097560975618		_
org.apache.commons.math3.linear.RealMatrixFormat#?#RealMatrixFormat#?,NumberFormat#99	0.012048192771084376	0.0	0.009638554216867502		_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#getStartValue#?#124	0.0092592592592593	0.010869565217391353	0.009581320450885712	searchStart>0	_
org.apache.commons.math3.linear.RealMatrixFormat#?#RealMatrixFormat#?,String,String,String,String,String,String,NumberFormat#142	0.011904761904761862	0.0	0.00952380952380949		_
org.apache.commons.math3.util.CompositeFormat#NumberFormat#getDefaultNumberFormat#?#43	0.010638297872340385	0.0	0.00851063829787231		_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#getRelativeAccuracy#?#136	0.007575757575757569	0.008620689655172376	0.00778474399164053	relativeAccuracy>=0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#void#verifySequence#?,double,double,double#277	0.009615384615384581	0.0	0.007692307692307665		_
org.apache.commons.math3.util.FastMathLiteralArrays#double[][]#loadLnMant#?#6174	0.009615384615384581	0.0	0.007692307692307665		_
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils#void#verifySequence#?,double,double,double#373	0.009433962264150941	0.0	0.007547169811320753		_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#getFunctionValueAccuracy#?#142	0.007299270072992692	0.008264462809917328	0.0074923086203776195	functionValueAccuracy>=0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#getAbsoluteAccuracy#?#130	0.0071428571428571175	0.008064516129032251	0.007327188940092145	absoluteAccuracy>=0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#solve#?,int,FUNC,double,double,double#196	0.00649350649350644	0.00877192982456143	0.0069491911597174385	doSolve()>0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#computeObjectiveValue#?,double#156	0.0066225165562914245	0.0078125	0.00686051324503314	function.value(point)<0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#double#getMax#?#118	0.00666666666666671	0.007518796992481258	0.00683709273182962	searchMax>0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#void#setup#?,int,FUNC,double,double,double#182	0.006451612903225823	0.007462686567164201	0.006653827636013499	startValue>=min	_
org.apache.commons.math3.util.CompositeFormat#NumberFormat#getDefaultNumberFormat#?,Locale#56	0.008064516129032251	0.0	0.006451612903225801		_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#?#BaseAbstractUnivariateSolver#?,double,double,double#96	0.006134969325153339	0.007299270072992692	0.00636782947472121	relativeAccuracy<absoluteAccuracy	_
org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver#?#AbstractUnivariateSolver#?,double#37	0.007092198581560294	0.0	0.005673758865248235		_
org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils#void#verifyInterval#?,double,double#353	0.005434782608695676	0.006134969325153339	0.005574819951987209	!(lower >= upper)	_
org.apache.commons.math3.linear.BlockRealMatrix#int#getColumnDimension#?#1257	0.004950495049504955	0.007692307692307665	0.005498857578065497	columns!=0	_
org.apache.commons.math3.linear.BlockRealMatrix#int#getRowDimension#?#1251	0.0049261083743842304	0.007633587786259555	0.005467604256759295	rows>0	_
org.apache.commons.math3.linear.BlockRealMatrix#int#blockHeight#?,int#1571	0.0049261083743842304	0.007518796992481258	0.0054446460980036365	(blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE>0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#?#BaseAbstractUnivariateSolver#?,double#67	0.0066225165562914245	0.0	0.00529801324503314		_
org.apache.commons.math3.linear.BlockRealMatrix#int#blockWidth#?,int#1580	0.004739336492891044	0.007194244604316502	0.005230318115176135	(blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE!=0	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#void#incrementEvaluationCount#?#310	0.00649350649350644	0.0	0.005194805194805152		_
org.apache.commons.math3.linear.BlockRealMatrix#?#BlockRealMatrix#?,double[][]#127	0.005681818181818232	0.0	0.004545454545454586		_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?#53	0.0037878787878787845	0.0	0.0030303030303030277		_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int#62	0.003424657534246589	0.0	0.0027397260273972716		_
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#void#parseOptimizationData#?,OptimizationData#105	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#RealMatrix#computeWeightedJacobian#?,double[]#65	0.0	0.0	0.0		_
org.apache.commons.math3.linear.LUDecomposition$Solver#?#Solver#?,double[][],int[],boolean#282	0.0	0.0	0.0		_
org.apache.commons.math3.util.FastMath#double#pow#?,double,int#1662	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.Weight#?#Weight#?,double[]#42	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#?#MultivariateVectorOptimizer#?,ConvergenceChecker<PointVectorValuePair>#48	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.Target#double[]#getTarget#?#48	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction#MultivariateVectorFunction#getModelFunction#?#45	0.0	0.0	0.0		_
org.apache.commons.math3.linear.ArrayRealVector#?#ArrayRealVector#?,double[],boolean#108	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#RealMatrix#copy#?#107	0.0	0.0	0.0		_
org.apache.commons.math3.util.FastMath#double#min#?,double,double#3480	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#RealMatrix#multiply#?,RealMatrix#184	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#double#computeCost#?,double[]#77	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#void#determineLMParameter#?,double[],double,double[],double[],double[],double[]#703	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#double[]#operate#?,double[]#289	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#double#getEntry#?,int,int#226	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#void#determineLMDirection#?,double[],double[],double[],double[]#765	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?#162	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#?#JacobianMultivariateVectorOptimizer#?,ConvergenceChecker<PointVectorValuePair>#50	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?,double,double,double,double,double#277	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.Weight#RealMatrix#getWeight#?#65	0.0	0.0	0.0		_
org.apache.commons.math3.linear.BlockRealMatrix#double[][]#getData#?#611	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#?#DiagonalMatrix#?,int#53	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#void#setEntry#?,int,int,double#237	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#?#GaussNewtonOptimizer#?,ConvergenceChecker<PointVectorValuePair>#63	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian#MultivariateMatrixFunction#getModelFunctionJacobian#?#45	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#double[]#getDataRef#?#219	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#void#checkParameters#?#161	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#void#setCost#?,double#120	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.Target#?#Target#?,double[]#39	0.0	0.0	0.0		_
org.apache.commons.math3.linear.ArrayRealVector#void#checkVectorDimensions#?,int#758	0.0	0.0	0.0		_
org.apache.commons.math3.optim.PointVectorValuePair#?#PointVectorValuePair#?,double[],double[]#44	0.0	0.0	0.0		_
org.apache.commons.math3.linear.ArrayRealVector#double#dotProduct#?,RealVector#459	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#?#DiagonalMatrix#?,double[],boolean#84	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#DiagonalMatrix#multiply#?,DiagonalMatrix#171	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#RealMatrix#getWeightSquareRoot#?#111	0.0	0.0	0.0		_
org.apache.commons.math3.linear.LUDecomposition$Solver#RealVector#solve#?,RealVector#300	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#double[]#getTarget#?#105	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#PointVectorValuePair#optimize#?,OptimizationData#197	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian#?#ModelFunctionJacobian#?,MultivariateMatrixFunction#36	0.0	0.0	0.0		_
org.apache.commons.math3.linear.ArrayRealVector#double[]#getDataRef#?#450	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#RealMatrix#squareRoot#?,RealMatrix#271	0.0	0.0	0.0		_
org.apache.commons.math3.analysis.function.Sinc#?#Sinc#?,boolean#82	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#RealMatrix#getWeight#?#96	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.ModelFunction#?#ModelFunction#?,MultivariateVectorFunction#36	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#void#parseOptimizationData#?,OptimizationData#151	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#?#DiagonalMatrix#?,double[]#64	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#void#qrDecomposition#?,RealMatrix#867	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#PointVectorValuePair#optimize#?,OptimizationData#83	0.0	0.0	0.0		_
org.apache.commons.math3.linear.AbstractRealMatrix#RealVector#operate#?,RealVector#683	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#?#AbstractLeastSquaresOptimizer#?,ConvergenceChecker<PointVectorValuePair>#53	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#double[]#computeResiduals#?,double[]#218	0.0	0.0	0.0		_
org.apache.commons.math3.util.FastMath#double#ulp#?,double#3029	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer#void#parseOptimizationData#?,OptimizationData#249	0.0	0.0	0.0		_
org.apache.commons.math3.linear.LUDecomposition#?#LUDecomposition#?,RealMatrix#76	0.0	0.0	0.0		_
org.apache.commons.math3.linear.LUDecomposition#DecompositionSolver#getSolver#?#258	0.0	0.0	0.0		_
org.apache.commons.math3.optim.SimpleVectorValueChecker#?#SimpleVectorValueChecker#?,double,double#68	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#void#qTy#?,double[]#938	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#int#getColumnDimension#?#282	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#void#checkParameters#?#953	0.0	0.0	0.0		_
org.apache.commons.math3.optim.PointVectorValuePair#double[]#getValueRef#?#105	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer#double[][]#computeJacobian#?,double[]#60	0.0	0.0	0.0		_
org.apache.commons.math3.optim.PointVectorValuePair#?#PointVectorValuePair#?,double[],double[],boolean#58	0.0	0.0	0.0		_
org.apache.commons.math3.analysis.function.Sinc#?#Sinc#?#72	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#PointVectorValuePair#doOptimize#?#83	0.0	0.0	0.0		GT
org.apache.commons.math3.linear.ArrayRealVector#double[]#toArray#?#726	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#void#checkParameters#?#178	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#PointVectorValuePair#optimize#?,OptimizationData#87	0.0	0.0	0.0		_
org.apache.commons.math3.linear.LUDecomposition#?#LUDecomposition#?,RealMatrix,double#88	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer#PointVectorValuePair#doOptimize#?#498	0.0	0.0	0.0		GT
org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer#double[]#computeObjectiveValue#?,double[]#62	0.0	0.0	0.0		_
org.apache.commons.math3.optim.SimpleVectorValueChecker#boolean#converged#?,int,PointVectorValuePair,PointVectorValuePair#135	0.0	0.0	0.0		_
org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer#?#GaussNewtonOptimizer#?,boolean,ConvergenceChecker<PointVectorValuePair>#74	0.0	0.0	0.0		_
org.apache.commons.math3.linear.DiagonalMatrix#int#getRowDimension#?#276	0.0	0.0	0.0		_
