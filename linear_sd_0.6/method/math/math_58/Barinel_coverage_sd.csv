line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#VectorialPointValuePair#doOptimize#?#384	0.045454545454545414	1.0	0.6173913043478261	(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5>=xNorm	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#determineLMParameter#?,double[],double,double[],double[],double[],double[]#533	0.0625	0.5	0.32	fp / (delta * sum2)>dxNorm	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#WeightedObservedPoint[]#getInterpolationPointsForY#?,WeightedObservedPoint[],int,int,double#262	0.33333333333333337	0.33333333333333337	0.26666666666666666	!((idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length))	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#void#validateParameters#?,double[]#182	0.33333333333333337	0.33333333333333337	0.24	param[2] <= 0	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#?#WeightedObservedPoint#?,double,double,double#49	0.04761904761904767	0.33333333333333337	0.21904761904761907	x==weight	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double#interpolateXAtY#?,WeightedObservedPoint[],int,int,double#223	0.16666666666666663	0.16666666666666663	0.16666666666666663	!(idxStep == 0)	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double[]#guess#?#156	0.16666666666666663	0.16666666666666663	0.16666666666666663	parameters == null	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#int#findMaxY#?,WeightedObservedPoint[]#203	0.16666666666666663	0.16666666666666663	0.16666666666666663	maxYIdx!=0	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#?#ParameterGuesser#?,WeightedObservedPoint[]#144	0.16666666666666663	0.16666666666666663	0.14999999999999997	!(observations.length < 3)	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#double#value#?,double,double[]#132	0.1428571428571429	0.1428571428571429	0.1428571428571429	Gaussian.value(diff,param[0],i2s2)>0	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#double[]#basicGuess#?,WeightedObservedPoint[]#183	0.33333333333333337	0.0	0.13333333333333336		_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getX#?#64	0.050000000000000044	0.125	0.09500000000000001	x==0	_
org.apache.commons.math.analysis.function.Gaussian#double#value#?,double,double,double#197	0.07692307692307687	0.09090909090909094	0.0853146853146853	norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2)!=0	_
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#boolean#isBetween#?,double,double,double#291	0.16666666666666663	0.0	0.06666666666666665		_
org.apache.commons.math.optimization.fitting.GaussianFitter#double[]#fit#?#121	0.16666666666666663	0.0	0.06666666666666665		GT
org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser#Comparator<WeightedObservedPoint>#createWeightedObservedPointComparator#?#302	0.16666666666666663	0.0	0.06666666666666665		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#determineLMDirection#?,double[],double[],double[],double[]#688	0.04761904761904767	0.07692307692307687	0.06520146520146519	sin * cotan>=dpj	_
org.apache.commons.math.analysis.function.Gaussian$Parametric#double[]#gradient#?,double,double[]#154	0.1428571428571429	0.0	0.05714285714285716		_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getY#?#71	0.050000000000000044	0.052631578947368474	0.0515789473684211	y>0	_
org.apache.commons.math.optimization.fitting.WeightedObservedPoint#double#getWeight#?#57	0.050000000000000044	0.050000000000000044	0.050000000000000044	weight>0	_
org.apache.commons.math.optimization.fitting.GaussianFitter#?#GaussianFitter#?,DifferentiableMultivariateVectorialOptimizer#68	0.125	0.0	0.05		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#qrDecomposition#?#828	0.022222222222222254	0.06666666666666665	0.04833333333333334	gamma * weightedResidualJacobian[j][pk]>ak2	_
org.apache.commons.math.optimization.fitting.CurveFitter#void#addObservedPoint#?,double,double#67	0.09999999999999998	0.0	0.039999999999999994		_
org.apache.commons.math.optimization.fitting.CurveFitter#WeightedObservedPoint[]#getObservations#?#100	0.09090909090909094	0.0	0.036363636363636376		_
org.apache.commons.math.exception.NotStrictlyPositiveException#?#NotStrictlyPositiveException#?,Number#38	0.06666666666666665	0.0	0.02666666666666666		_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?,double,double,double,double,double#212	0.019230769230769273	0.030303030303030276	0.025874125874125874	orthoTolerance==parRelativeTolerance	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#void#qTy#?,double[]#842	0.020408163265306145	0.023809523809523836	0.02244897959183676	permutation[k]<k	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#void#updateResidualsAndCost#?#142	0.014285714285714235	0.02631578947368418	0.021503759398496206	cols<i	_
org.apache.commons.math.util.FastMath#double#exp#?,double,double,double[]#780	0.004524886877828038	0.033333333333333326	0.021146131805157585	x - (intVal + intFrac / 1024.0)<extra	_
org.apache.commons.math.optimization.fitting.CurveFitter#double[]#fit#?,ParametricUnivariateRealFunction,double[]#126	0.050000000000000044	0.0	0.020000000000000018		_
org.apache.commons.math.optimization.fitting.CurveFitter#double[]#fit#?,int,ParametricUnivariateRealFunction,double[]#152	0.050000000000000044	0.0	0.020000000000000018		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#MultivariateMatrixFunction#jacobian#?#183	0.050000000000000044	0.0	0.020000000000000018		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#?#TheoreticalValuesFunction#?,ParametricUnivariateRealFunction#178	0.050000000000000044	0.0	0.020000000000000018		_
org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction#double[]#value#?,double[]#203	0.050000000000000044	0.0	0.020000000000000018		_
org.apache.commons.math.optimization.fitting.CurveFitter#void#addObservedPoint#?,double,double,double#80	0.04761904761904767	0.0	0.01904761904761907		_
org.apache.commons.math.exception.OutOfRangeException#?#OutOfRangeException#?,Number,Number,Number#46	0.04761904761904767	0.0	0.01904761904761907		_
org.apache.commons.math.optimization.fitting.CurveFitter#?#CurveFitter#?,DifferentiableMultivariateVectorialOptimizer#53	0.045454545454545414	0.0	0.018181818181818167		_
org.apache.commons.math.exception.NumberIsTooSmallException#?#NumberIsTooSmallException#?,Number,Number,boolean#52	0.04166666666666663	0.0	0.016666666666666653		_
org.apache.commons.math.optimization.SimpleVectorialValueChecker#boolean#converged#?,int,VectorialPointValuePair,VectorialPointValuePair#83	0.015625	0.015625	0.015528846153846133	difference > size * getRelativeThreshold() && difference > getAbsoluteThreshold()	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#void#updateJacobian#?#115	0.014285714285714235	0.01449275362318836	0.01440993788819871	-ji[j] * wi<wi	_
org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer#VectorialPointValuePair#optimize#?,int,DifferentiableMultivariateVectorialFunction,double[],double[],double[]#246	0.014084507042253502	0.014084507042253502	0.014084507042253502	point.length!=maxEval	_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#VectorialPointValuePair#optimize#?,int,FUNC,double[],double[],double[]#120	0.014084507042253502	0.014084507042253502	0.014084507042253502	!(w == null)	_
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer#?#LevenbergMarquardtOptimizer#?#152	0.03125	0.0	0.0125		_
org.apache.commons.math.util.FastMath#double#min#?,double,double#3831	0.010752688172043001	0.010869565217391353	0.010822814399252013	a>=0	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#double#getRelativeThreshold#?#73	0.009345794392523366	0.010204081632653073	0.00986076673660119	relativeThreshold>0	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#80	0.009433962264150941	0.009433962264150941	0.009433962264150941	absoluteThreshold>0	_
org.apache.commons.math.optimization.VectorialPointValuePair#double[]#getValueRef#?#97	0.01538461538461533	0.0	0.006153846153846132		_
org.apache.commons.math.exception.NumberIsTooSmallException#?#NumberIsTooSmallException#?,Localizable,Number,Number,boolean#73	0.015151515151515138	0.0	0.006060606060606055		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#getTargetRef#?#165	0.014285714285714235	0.0	0.005714285714285694		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#getWeightRef#?#171	0.014285714285714235	0.0	0.005714285714285694		_
org.apache.commons.math.optimization.VectorialPointValuePair#?#VectorialPointValuePair#?,double[],double[]#47	0.014285714285714235	0.0	0.005714285714285694		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#ConvergenceChecker<VectorialPointValuePair>#getConvergenceChecker#?#88	0.014084507042253502	0.0	0.005633802816901401		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#double[]#computeObjectiveValue#?,double[]#107	0.014084507042253502	0.0	0.005633802816901401		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#?#BaseAbstractVectorialOptimizer#?#62	0.013698630136986356	0.0	0.005479452054794543		_
org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer#?#BaseAbstractVectorialOptimizer#?,ConvergenceChecker<VectorialPointValuePair>#68	0.013698630136986356	0.0	0.005479452054794543		_
org.apache.commons.math.util.FastMath#double#max#?,double,double#3911	0.004065040650406471	0.005617977528089901	0.004996802777016529	a>0	_
org.apache.commons.math.util.Incrementor#void#incrementCount#?#84	0.00497512437810943	0.00497512437810943	0.00497512437810943	!(++count > maximalCount)	_
org.apache.commons.math.util.FastMath#double#exp#?,double#697	0.0036496350364964014	0.0037735849056603765	0.0037240049579947863	exp(x,0.0,null)>0	_
org.apache.commons.math.exception.util.ArgUtils#Object[]#flatten#?,Object[]#45	0.0035714285714285587	0.00347222222222221	0.003357218683651797	o instanceof Object[]	_
org.apache.commons.math.optimization.AbstractConvergenceChecker#?#AbstractConvergenceChecker#?#54	0.008264462809917328	0.0	0.0033057851239669312		_
org.apache.commons.math.exception.OutOfRangeException#?#OutOfRangeException#?,Localizable,Number,Number,Number#62	0.008264462809917328	0.0	0.0033057851239669312		_
org.apache.commons.math.util.FastMath#int#min#?,int,int#3784	0.0031948881789137795	0.0032051282051281937	0.0032010321946424284	(a <= b) ? a : b>0	_
org.apache.commons.math.util.FastMath#double#sqrt#?,double#277	0.0020790020790020236	0.0021141649048626032	0.0021000997745183715	Math.sqrt(a)!=0	_
org.apache.commons.math.util.Incrementor#void#resetCount#?#93	0.004878048780487809	0.0	0.0019512195121951237		_
org.apache.commons.math.util.Incrementor#void#setMaximalCount#?,int#44	0.004784688995215336	0.0	0.0019138755980861344		_
org.apache.commons.math.exception.MathIllegalNumberException#?#MathIllegalNumberException#?,Localizable,Localizable,Number,Object#51	0.004016064257028162	0.0	0.001606425702811265		_
org.apache.commons.math.util.FastMath#double#abs#?,double#3380	0.0015082956259426794	0.0016025641025640969	0.0015648567119155299	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x>0	_
org.apache.commons.math.exception.MathIllegalArgumentException#?#MathIllegalArgumentException#?,Localizable,Localizable,Object#44	0.0031055900621117516	0.0	0.0012422360248447008		_
org.apache.commons.math.exception.MathRuntimeException#?#MathRuntimeException#?,Throwable,Localizable,Localizable,Object#68	0.0027100271002710175	0.0	0.001084010840108407		_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1130	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1021	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1798	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1071	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1909	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1047	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1729	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1061	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1810	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1096	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#988	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1220	0.0	0.0	0.0		_
