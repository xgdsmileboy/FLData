line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.OpenMapRealVector#void#setEntry#?,int,double#666	0.9991967871485944	1.0	0.9996787148594377	!(entries.containsKey(index))	_
org.apache.commons.math.linear.OpenMapRealVector#OpenMapRealVector#ebeMultiply#?,RealVector#371	0.9995982322217757	0.9995982322217757	0.9995982322217756	iter.hasNext()	GT
org.apache.commons.math.linear.AbstractRealVector#void#checkVectorDimensions#?,int#64	0.9991967871485944	0.9995982322217757	0.9994376541925032	!(d != n)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int#216	0.9987956643918106	0.9987956643918106	0.9986353440604474	states[index] == FREE	_
org.apache.commons.math.linear.OpenMapRealVector#double#getEntry#?,int#480	0.9967948717948718	0.9991967871485944	0.9982360210071054	entries.get(index)==0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#void#advance#?#563	0.9995982322217757	0.9995982322217757	0.9970443684747818	referenceCount != count	_
org.apache.commons.math.linear.AbstractRealVector#void#checkIndex#?,int#76	0.9963956748097716	0.9963956748097716	0.9963956748097718	!(index < 0 || index >= getDimension())	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#doRemove#?,int#397	0.9944044764188649	0.9963956748097716	0.9955991954534089	missingEntries<=previous	_
org.apache.commons.math.linear.OpenMapRealVector#int#getDimension#?#422	0.9952	0.9952	0.9952	virtualSize>0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#int#key#?#535	0.9940071913703555	0.9948020791683327	0.9944841240491418	keys[current]==0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,OpenIntToDoubleHashMap#144	0.9944044764188649	0.9944044764188649	0.9944044764188649	source.count!=length	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#remove#?,int#357	0.9944044764188649	0.9944044764188649	0.9944044764188649	doRemove(index)>=0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#double#value#?#546	0.9936102236421726	0.9936102236421726	0.9936102236421726	!(referenceCount != count)	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#get#?,int#187	0.9916301315265045	0.9928172386272944	0.9923423957869784	missingEntries==0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#double#put#?,int,double#411	0.9787568843430369	0.9845666798575387	0.982242761651738	missingEntries<=value	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int#259	0.9787568843430369	0.9799133517132729	0.9794507647651784	findInsertionIndex(keys,states,key,mask)==0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#findInsertionIndex#?,int[],byte[],int,int#275	0.9787568843430369	0.9799133517132729	0.9794507647651784	index<=0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#hashOf#?,int#479	0.9779874213836478	0.9795275590551182	0.97891150398653	h ^ (h >>> 7) ^ (h >>> 4)==0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#int#computeCapacity#?,int#159	0.9787568843430369	0.9787568843430369	0.9787568843430369	capacity>0	_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,int,double#126	0.9779874213836478	0.9783720015729455	0.9782181694972264	capacity - 1>expectedSize	_
org.apache.commons.math.util.FastMath#double#ceil#?,double#3757	0.9374529012810852	0.9420673987126089	0.9402215997399994	y>0	_
org.apache.commons.math.util.FastMath#double#floor#?,double#3741	0.8927161822748475	0.8936781609195403	0.8932933694616632	y>0	_
org.apache.commons.math.util.FastMath#double#abs#?,double#3410	0.7516616314199397	0.8146692861820564	0.7894662242772097	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x==0	_
org.apache.commons.math.MathRuntimeException#ConcurrentModificationException#createConcurrentModificationException#?,Localizable,Object#373	0.9991967871485944	0.0	0.3996787148594378		_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,OpenMapRealVector#182	0.9983948635634028	0.0	0.3993579454253611		_
org.apache.commons.math.linear.OpenMapRealVector#?#OpenMapRealVector#?,int,double#77	0.9983948635634028	0.0	0.3993579454253611		_
org.apache.commons.math.linear.OpenMapRealVector#OpenIntToDoubleHashMap#getEntries#?#208	0.9975942261427425	0.0	0.399037690457097		_
org.apache.commons.math.linear.OpenMapRealVector#boolean#isDefaultValue#?,double#220	0.9952	0.0	0.39808		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#boolean#hasNext#?#518	0.9936102236421726	0.0	0.39744408945686904		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#Iterator#iterator#?#241	0.9932135728542913	0.0	0.39728542914171655		_
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator#?#Iterator#?#501	0.9932135728542913	0.0	0.39728542914171655		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#?#OpenIntToDoubleHashMap#?,double#103	0.9845666798575387	0.0	0.39382667194301546		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#containsKey#?,int,int#385	0.9795275590551182	0.0	0.39181102362204734		_
org.apache.commons.math.util.OpenIntToDoubleHashMap#boolean#shouldGrowTable#?#469	0.9787568843430369	0.0	0.39150275373721477		_
org.apache.commons.math.util.FastMath#void#buildSinCosTables#?#1899	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#resplit#?,double#1068	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double[]#slowLog#?,double#1748	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#quadMult#?,double,double,double#1179	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitMult#?,double,double,double#1086	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowCos#?,double,double#1868	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#split#?,double,double#1046	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowSin#?,double,double#1798	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitReciprocal#?,double,double#1123	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#slowexp#?,double,double#1037	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#double#expint#?,int,double#1228	0.0	0.0	0.0		_
org.apache.commons.math.util.FastMath#void#splitAdd#?,double,double,double#1096	0.0	0.0	0.0		_
