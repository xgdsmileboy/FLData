line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optimization.linear.SimplexTableau#PointValuePair#getSolution#?#421	0.0	1.3333333333333335	1.3333333333333335	(basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative)<mostNegative	_
org.apache.commons.math3.optimization.linear.SimplexTableau#LinearConstraint#normalize#?,LinearConstraint#260	0.0	0.3285714285714286	0.3285714285714286	constraint.getValue() < 0	_
org.apache.commons.math3.optimization.linear.SimplexTableau#void#dropPhase1Objective#?#338	0.0	0.2888888888888889	0.2888888888888889	Precision.compareTo(entry,0d,maxUlps) > 0	GT
org.apache.commons.math3.optimization.linear.SimplexSolver#Integer#getPivotRow#?,SimplexTableau,int#94	0.0	0.1590909090909091	0.1590909090909091	tableau.getEntry(i,col)>minRatio	_
org.apache.commons.math3.optimization.linear.SimplexSolver#void#doIteration#?,SimplexTableau#152	0.0	0.1090909090909091	0.1090909090909091	tableau.getEntry(i,pivotCol)>pivotVal	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#309	0.0	0.07402597402597402	0.07402597402597402	SGN_MASK - yInt>xInt	_
org.apache.commons.math3.optimization.linear.SimplexTableau#RealMatrix#createTableau#?,boolean#225	0.0	0.06688963210702342	0.06688963210702342	constraint.getRelationship() == Relationship.GEQ	_
org.apache.commons.math3.optimization.linear.SimplexTableau#void#initializeColumnLabels#?#161	0.0	0.053571428571428575	0.053571428571428575	!restrictToNonNegative	_
org.apache.commons.math3.optimization.linear.SimplexSolver#void#solvePhase1#?,SimplexTableau#178	0.0	0.017647058823529405	0.017647058823529405	!(!Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,epsilon))	_
org.apache.commons.math3.linear.ArrayRealVector#RealVector#mapMultiplyToSelf#?,double#375	0.0	0.013196480938416423	0.013196480938416423	data[i] * d==d	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,int#115	0.0	0.011904761904761904	0.011904761904761904	equals(x,y,maxUlps)	_
org.apache.commons.math3.optimization.linear.SimplexTableau#Integer#getBasicRow#?,int#312	0.0	0.009090909090909094	0.009090909090909094	!(i < getHeight())	_
org.apache.commons.math3.optimization.linear.SimplexTableau#boolean#isOptimal#?#384	0.0	0.007575757575757582	0.007575757575757582	Precision.compareTo(entry,0d,epsilon) < 0	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#89	0.0	0.005925925925925932	0.005925925925925932	equals(x,y,eps)	_
org.apache.commons.math3.optimization.linear.SimplexTableau#?#SimplexTableau#?,LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int#144	0.0	0.0026455026455026454	0.0026455026455026454	getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ)<maxUlps	_
org.apache.commons.math3.linear.ArrayRealVector#void#checkVectorDimensions#?,int#763	0.0	8.771929824561396E-4	8.771929824561396E-4	!(data.length != n)	_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#54	0.0	1.4184397163120517E-5	1.4184397163120517E-5	!(rowDimension < 1)	_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#257	0.0	1.1260785721323857E-5	1.1260785721323857E-5	!(o == null)	_
org.apache.commons.math3.optimization.linear.SimplexTableau#int#getConstraintTypeCounts#?,Relationship#285	0.0	0.0	0.0	constraint.getRelationship() == relationship	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#379	0.0	0.0	0.0	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.optimization.linear.SimplexSolver#Integer#getPivotColumn#?,SimplexTableau#72	0.0	0.0	0.0	i < tableau.getWidth() - 1	_
org.apache.commons.math3.optimization.linear.SimplexTableau#void#divideRow#?,int,double#439	0.0	0.0	0.0	j < getWidth()	_
org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer#void#incrementIterationsCounter#?#127	0.0	0.0	0.0	!(++iterations > maxIterations)	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setRowVector#?,int,RealVector#489	0.0	0.0	0.0	!(i < nCols)	_
org.apache.commons.math3.linear.ArrayRealVector#ArrayRealVector#subtract#?,RealVector#322	0.0	0.0	0.0	i < dim	_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#394	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.linear.ArrayRealVector#double#dotProduct#?,RealVector#452	0.0	0.0	0.0	i < data.length	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#515	0.0	0.0	0.0	getColumnDimension()>row	_
org.apache.commons.math3.linear.ArrayRealVector#?#ArrayRealVector#?,double[],boolean#103	0.0	0.0	0.0	!(d == null)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#281	0.0	0.0	0.0	!(subMatrix[i].length != nCols)	_
