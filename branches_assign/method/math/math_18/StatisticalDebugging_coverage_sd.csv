line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#checkParameters#?#559	0.0	0.8999999999999999	0.8999999999999999	!(inputSigma != null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1244	0.0	0.8823529411764706	0.8823529411764706	mat.getColumnDimension()==rd	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#push#?,double[],double#827	0.0	0.8823529411764706	0.8823529411764706	vals[i - 1]==val	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#initializeCMA#?,double[]#582	0.0	0.8823529411764706	0.8823529411764706	lambda <= 0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#748	0.0	0.875	0.875	(1. - negminresidualvariance) / square(arnormsInv).multiply(weights).getEntry(0,0)<=negccov	_
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#674	0.0	0.6222222222222222	0.6222222222222222	realEigenvalues[i]==maxAbsoluteValue	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?,int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>#320	0.0	0.5897435897435896	0.5897435897435896	checkFeasableCount==lambda	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#decode#?,double[]#952	0.0	0.38235294117647056	0.38235294117647056	!(boundaries == null)	GT
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#value#?,double[]#969	0.0	0.38235294117647056	0.38235294117647056	boundaries != null && isRepairMode	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#encode#?,double[]#926	0.0	0.38235294117647056	0.38235294117647056	!(boundaries == null)	GT
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#560	0.0	0.2833333333333333	0.2833333333333333	getRowDimension()<column	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#467	0.0	0.23809523809523808	0.23809523809523808	getRowDimension()==column	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#PointValuePair#optimize#?,int,FUNC,GoalType,double[],double[],double[]#122	0.0	0.1291866028708134	0.1291866028708134	!(lower == null)	_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1164	0.0	0.03162393162393162	0.03162393162393162	xa - aa>xb	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1741	0.0	0.01744579945799458	0.01744579945799458	a + t<sinEpsB	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#boolean#updateEvolutionPaths#?,RealMatrix,RealMatrix#667	0.0	0.00735294117647059	0.00735294117647059	!(hsig)	_
org.apache.commons.math3.linear.MatrixUtils#void#checkAdditionCompatible#?,AnyMatrix,AnyMatrix#506	0.0	0.005357142857142859	0.005357142857142859	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.util.FastMath#double#cosQ#?,double,double#1821	0.0	0.0038644907903303723	0.0038644907903303723	pi2b - xb<=xb	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2291	0.0	0.003483825097760398	0.003483825097760398	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#polyCosine#?,double#1677	0.0	0.003124310189666004	0.003124310189666004	p * x2 + 0.041666666666621166<=x	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#331	0.0	0.0023705581373515464	0.0023705581373515464	Double.doubleToLongBits(y)==xInt	_
org.apache.commons.math3.util.FastMath#double#max#?,double,double#3510	0.0	0.002304535409870567	0.002304535409870567	!(a < b)	_
org.apache.commons.math3.linear.EigenDecomposition#?#EigenDecomposition#?,RealMatrix#116	0.0	0.002268859897901307	0.002268859897901307	isSymmetric(matrix,false)	_
org.apache.commons.math3.linear.EigenDecomposition#boolean#isSymmetric#?,RealMatrix,boolean#195	0.0	0.002268859897901307	0.002268859897901307	!(i < rows)	_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2236	0.0	0.0019381754870076533	0.0019381754870076533	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#polySine#?,double#1657	0.0	0.0017947510886195126	0.0017947510886195126	p * x2 + 0.008333333333329196<=x	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#96	0.0	0.0016006402561024383	0.0016006402561024383	equals(x,y,eps)	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#234	0.0	0.001422475106685639	0.001422475106685639	mt[0]<=bits	_
org.apache.commons.math3.linear.TriDiagonalTransformer#?#TriDiagonalTransformer#?,RealMatrix#63	0.0	8.163265306122408E-4	8.163265306122408E-4	!(!matrix.isSquare())	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][],boolean#116	0.0	7.327796775769418E-4	7.327796775769418E-4	r < nRows	_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#68	0.0	1.2044129691188461E-5	1.2044129691188461E-5	!(rowDimension < 1)	_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#264	0.0	8.599875731795433E-6	8.599875731795433E-6	!(o == null)	_
org.apache.commons.math3.util.Incrementor#void#incrementCount#?#155	0.0	7.6145224171542125E-6	7.6145224171542125E-6	!(++count > maximalCount)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#times#?,RealMatrix,RealMatrix#1096	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#reverse#?,int[]#1351	0.0	0.0	0.0	!(i < indices.length)	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#multiply#?,RealMatrix#150	0.0	0.0	0.0	!(i < nSum)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#divide#?,RealMatrix,RealMatrix#1111	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQ#?#86	0.0	0.0	0.0	cachedQ == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1079	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateBD#?,double#789	0.0	0.0	0.0	ccov1 + ccovmu + negccov > 0 && (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#PointValuePair#optimizeInternal#?,int,MultivariateFunction,GoalType,double[]#131	0.0	0.0	0.0	!(goalType == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#eye#?,int,int#1219	0.0	0.0	0.0	r < n	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#log#?,RealMatrix#1050	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#418	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextGaussian#?#99	0.0	0.0	0.0	!(Double.isNaN(nextGaussian))	_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int,MaxCountExceededCallback#81	0.0	0.0	0.0	!(cb == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#randn1#?,int,int#1377	0.0	0.0	0.0	!(c < popSize)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#ones#?,int,int#1206	0.0	0.0	0.0	!(r < n)	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#537	0.0	0.0	0.0	i < nCols	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getD#?#254	0.0	0.0	0.0	!(Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) < 0)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#repair#?,double[]#1015	0.0	0.0	0.0	!(i < x.length)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#walkInRowOrder#?,RealMatrixPreservingVisitor#413	0.0	0.0	0.0	i < rows	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createColumnRealMatrix#?,double[]#339	0.0	0.0	0.0	!(columnData == null)	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,double[][]#130	0.0	0.0	0.0	!(data == null || data[0] == null)	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarMultiply#?,double#129	0.0	0.0	0.0	!(row < rowCount)	_
org.apache.commons.math3.linear.MatrixUtils#void#checkSubtractionCompatible#?,AnyMatrix,AnyMatrix#523	0.0	0.0	0.0	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.util.FastMath$CodyWaite#?#CodyWaite#?,double,double#3808	0.0	0.0	0.0	remA > 0	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#402	0.0	0.0	0.0	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#copyColumn#?,RealMatrix,int,RealMatrix,int#1194	0.0	0.0	0.0	!(i < m1.getRowDimension())	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#98	0.0	0.0	0.0	cachedQt == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,RealMatrix#1279	0.0	0.0	0.0	m.getEntry(r,c)>=max	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#subtract#?,RealMatrix#102	0.0	0.0	0.0	!(col < columnCount)	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealDiagonalMatrix#?,double[]#217	0.0	0.0	0.0	!(i < diagonal.length)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,double[]#1325	0.0	0.0	0.0	r < m.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#inverse#?,int[]#1339	0.0	0.0	0.0	i < indices.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sqrt#?,RealMatrix#1065	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#diag#?,RealMatrix#1172	0.0	0.0	0.0	i < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sumRows#?,RealMatrix#1156	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarAdd#?,double#116	0.0	0.0	0.0	!(col < columnCount)	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getV#?#223	0.0	0.0	0.0	cachedV == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#sortedIndices#?,double[]#840	0.0	0.0	0.0	!(i < doubles.length)	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#523	0.0	0.0	0.0	!(vector.getDimension() != nRows)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#triu#?,RealMatrix,int#1140	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,RealMatrix#1294	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#285	0.0	0.0	0.0	subMatrix[0].length>column	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#selectColumns#?,RealMatrix,int[]#1125	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,double[]#1312	0.0	0.0	0.0	!(max < m[r])	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#add#?,RealMatrix#84	0.0	0.0	0.0	row < rowCount	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMultiplicationCompatible#?,AnyMatrix,AnyMatrix#541	0.0	0.0	0.0	!(left.getColumnDimension() != right.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#penalty#?,double[],double[]#1034	0.0	0.0	0.0	!(i < x.length)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#copyOut#?#531	0.0	0.0	0.0	!(i < nRows)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1266	0.0	0.0	0.0	step<=start	_
