line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#push#?,double[],double#827	0.0	1.8823529411764706	0.7529411764705882	vals[i - 1]==val	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#checkParameters#?#559	0.0	0.8999999999999999	0.36	!(inputSigma != null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1244	0.0	0.8823529411764706	0.35294117647058826	mat.getColumnDimension()==rd	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#initializeCMA#?,double[]#612	0.0	0.8823529411764706	0.35294117647058826	sumw * sumw / sumwq>=sumwq	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex#int#compareTo#?,DoubleIndex#872	0.0	0.8823529411764706	0.35294117647058826	Double.compare(value,o.value)==0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#748	0.0	0.875	0.35000000000000003	(1. - negminresidualvariance) / square(arnormsInv).multiply(weights).getEntry(0,0)<negccov	_
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#674	0.0	0.6222222222222222	0.2488888888888889	realEigenvalues[i]==maxAbsoluteValue	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?,int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>#319	0.0	0.5897435897435896	0.23589743589743586	diagonalOnly>=lambda	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarMultiply#?,double#127	0.0	0.40909090909090906	0.16363636363636364	getColumnDimension()>rowCount	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#decode#?,double[]#952	0.0	0.38235294117647056	0.15294117647058825	!(boundaries == null)	GT
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#value#?,double[]#969	0.0	0.38235294117647056	0.15294117647058825	boundaries != null && isRepairMode	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#encode#?,double[]#926	0.0	0.38235294117647056	0.15294117647058825	!(boundaries == null)	GT
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#560	0.0	0.2833333333333333	0.11333333333333334	getRowDimension()<column	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#467	0.0	0.23809523809523808	0.09523809523809523	getRowDimension()==column	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#subtract#?,RealMatrix#99	0.0	0.22752808988764045	0.09101123595505618	getColumnDimension()>rowCount	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#penalty#?,double[],double[]#1038	0.0	0.16666666666666663	0.06666666666666665	isMinimize ? penalty : -penalty>=0	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#multiply#?,RealMatrix#144	0.0	0.14393939393939392	0.05757575757575757	m.getColumnDimension()>nRows	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#PointValuePair#optimize#?,int,FUNC,GoalType,double[],double[],double[]#122	0.0	0.1291866028708134	0.051674641148325366	!(lower == null)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#walkInRowOrder#?,RealMatrixPreservingVisitor#411	0.0	0.09759759759759759	0.03903903903903904	getColumnDimension()>rows	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#transpose#?#599	0.0	0.09750566893424036	0.039002267573696146	getColumnDimension()>nRows	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][],boolean#112	0.0	0.08352402745995423	0.033409610983981694	d[0].length>nRows	_
org.apache.commons.math3.linear.AbstractRealMatrix#double#walkInOptimizedOrder#?,RealMatrixPreservingVisitor#873	0.0	0.08181527644614893	0.032726110578459575	walkInRowOrder(visitor)>0	_
org.apache.commons.math3.optimization.SimpleValueChecker#boolean#converged#?,int,PointValuePair,PointValuePair#79	0.0	0.03771043771043771	0.015084175084175084	FastMath.abs(p - c)>p	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1800	0.0	0.01961961961961962	0.007847847847847849	b + d<=cosEpsB	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarAdd#?,double#113	0.0	0.012383900928792574	0.00495356037151703	getColumnDimension()<rowCount	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextGaussian#?#103	0.0	0.009259259259259259	0.003703703703703704	2 * FastMath.PI * x<y	_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1274	0.0	0.008249333796779052	0.003299733518711621	lnza * epsilon + 0.19999954120254515>=x	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#boolean#updateEvolutionPaths#?,RealMatrix,RealMatrix#667	0.0	0.00735294117647059	0.002941176470588236	!(hsig)	_
org.apache.commons.math3.util.FastMath#double#cosQ#?,double,double#1820	0.0	0.006453944650970673	0.002581577860388269	-(a - pi2a + xa)>pi2b	_
org.apache.commons.math3.linear.MatrixUtils#void#checkAdditionCompatible#?,AnyMatrix,AnyMatrix#506	0.0	0.005357142857142859	0.002142857142857144	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#add#?,RealMatrix#82	0.0	0.004761904761904773	0.001904761904761909	getColumnDimension()==rowCount	_
org.apache.commons.math3.util.FastMath#double#sqrt#?,double#375	0.0	0.004504348161431519	0.0018017392645726079	Math.sqrt(a)<=0	_
org.apache.commons.math3.util.FastMath#double#log#?,double#1096	0.0	0.00414862914862915	0.00165945165945166	log(x,null)<0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#getEntry#?,int,int#307	0.0	0.004070056937498646	0.0016280227749994585	data[row][column]<0	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2291	0.0	0.003483825097760398	0.0013935300391041594	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#polyCosine#?,double#1677	0.0	0.0032243126897285057	0.0012897250758914023	p * x2 + 0.041666666666621166<x	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#double#getRelativeThreshold#?#85	0.0	0.002786377708978327	0.0011145510835913308	relativeThreshold>=0	_
org.apache.commons.math3.util.FastMath#double#max#?,double,double#3523	0.0	0.0027609340730228357	0.0011043736292091343	a!=0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#285	0.0	0.002430276541951668	9.721106167806672E-4	subMatrix[0].length==nRows	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#331	0.0	0.0023705581373515464	9.482232549406186E-4	Double.doubleToLongBits(y)==xInt	_
org.apache.commons.math3.linear.EigenDecomposition#?#EigenDecomposition#?,RealMatrix#116	0.0	0.002268859897901307	9.075439591605228E-4	isSymmetric(matrix,false)	_
org.apache.commons.math3.linear.EigenDecomposition#boolean#isSymmetric#?,RealMatrix,boolean#195	0.0	0.002268859897901307	9.075439591605228E-4	!(i < rows)	_
org.apache.commons.math3.util.FastMath#long#abs#?,long#2974	0.0	0.002239365691631844	8.957462766527376E-4	(x < 0l) ? -x : x==0	_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2236	0.0	0.0019381754870076533	7.752701948030614E-4	xa > 1.5707963267948966	_
org.apache.commons.math3.util.FastMath#double#polySine#?,double#1657	0.0	0.001832070091455757	7.328280365823028E-4	p * x2 + 0.008333333333329196<=x	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#96	0.0	0.0016006402561024383	6.402561024409754E-4	equals(x,y,eps)	_
org.apache.commons.math3.util.Incrementor#int#getMaximalCount#?#105	0.0	0.0015873015873015888	6.349206349206356E-4	maximalCount!=0	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#248	0.0	0.001422475106685639	5.689900426742556E-4	mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1]<y	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemB#?#3839	0.0	0.0013545241105291667	5.418096442116667E-4	finalRemB>0	_
org.apache.commons.math3.linear.TriDiagonalTransformer#?#TriDiagonalTransformer#?,RealMatrix#63	0.0	8.163265306122408E-4	3.2653061224489633E-4	!(!matrix.isSquare())	_
org.apache.commons.math3.util.FastMath#double#abs#?,double#2992	0.0	6.505486360633549E-4	2.60219454425342E-4	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x==0	_
org.apache.commons.math3.linear.ArrayRealVector#double#getEntry#?,int#600	0.0	4.8652499522162934E-4	1.9460999808865176E-4	data[index]>0	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#double#computeObjectiveValue#?,double[]#99	0.0	3.6036036036036015E-4	1.4414414414414407E-4	function.value(point)>0	_
org.apache.commons.math3.linear.ArrayRealVector#int#getDimension#?#610	0.0	2.2001716133858602E-5	8.800686453543441E-6	data.length>0	_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#68	0.0	1.2044129691188461E-5	4.8176518764753845E-6	!(rowDimension < 1)	_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#264	0.0	8.599875731795433E-6	3.4399502927181736E-6	!(o == null)	_
org.apache.commons.math3.util.Incrementor#void#incrementCount#?#155	0.0	7.6145224171542125E-6	3.045808966861685E-6	!(++count > maximalCount)	_
org.apache.commons.math3.util.FastMath#int#min#?,int,int#3396	0.0	7.297885072905882E-6	2.9191540291623533E-6	(a <= b) ? a : b!=0	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#92	0.0	0.0	0.0	absoluteThreshold>0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getColumnDimension#?#345	0.0	0.0	0.0	((data == null) || (data[0] == null)) ? 0 : data[0].length>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateBD#?,double#808	0.0	0.0	0.0	!(max(diagD) > 1e14 * min(diagD))	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#eye#?,int,int#1219	0.0	0.0	0.0	!(r < n)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#randn1#?,int,int#1377	0.0	0.0	0.0	c < popSize	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#537	0.0	0.0	0.0	!(i < nCols)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#repair#?,double[]#1015	0.0	0.0	0.0	i < x.length	_
org.apache.commons.math3.linear.MatrixUtils#void#checkSubtractionCompatible#?,AnyMatrix,AnyMatrix#523	0.0	0.0	0.0	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.util.FastMath$CodyWaite#?#CodyWaite#?,double,double#3808	0.0	0.0	0.0	remA > 0	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#402	0.0	0.0	0.0	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealDiagonalMatrix#?,double[]#217	0.0	0.0	0.0	i < diagonal.length	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getRowDimension#?#339	0.0	0.0	0.0	(data == null) ? 0 : data.length>0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#inverse#?,int[]#1339	0.0	0.0	0.0	i < indices.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#diag#?,RealMatrix#1172	0.0	0.0	0.0	!(i < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#int#getMaxEvaluations#?#72	0.0	0.0	0.0	evaluations.getMaximalCount()!=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,double[]#1312	0.0	0.0	0.0	max < m[r]	_
org.apache.commons.math3.util.FastMath$CodyWaite#int#getK#?#3827	0.0	0.0	0.0	finalK>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1266	0.0	0.0	0.0	step!=end	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#times#?,RealMatrix,RealMatrix#1095	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#reverse#?,int[]#1352	0.0	0.0	0.0	indices[indices.length - i - 1]<i	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#divide#?,RealMatrix,RealMatrix#1111	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQ#?#86	0.0	0.0	0.0	cachedQ == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1080	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#PointValuePair#optimizeInternal#?,int,MultivariateFunction,GoalType,double[]#128	0.0	0.0	0.0	!(f == null)	_
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#double#end#?#41	0.0	0.0	0.0	0>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#log#?,RealMatrix#1050	0.0	0.0	0.0	r < m.getRowDimension()	_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#418	0.0	0.0	0.0	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int,MaxCountExceededCallback#81	0.0	0.0	0.0	!(cb == null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#ones#?,int,int#1206	0.0	0.0	0.0	r < n	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getD#?#252	0.0	0.0	0.0	!(Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) > 0)	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createColumnRealMatrix#?,double[]#344	0.0	0.0	0.0	i < nRows	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextDouble#?#87	0.0	0.0	0.0	(high | low) * 0x1.0p-52d!=0	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,double[][]#130	0.0	0.0	0.0	!(data == null || data[0] == null)	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemA#?#3833	0.0	0.0	0.0	finalRemA>0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#copyColumn#?,RealMatrix,int,RealMatrix,int#1194	0.0	0.0	0.0	!(i < m1.getRowDimension())	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#98	0.0	0.0	0.0	cachedQt == null	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,RealMatrix#1279	0.0	0.0	0.0	m.getEntry(r,c)>=max	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,double[]#1330	0.0	0.0	0.0	min!=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sqrt#?,RealMatrix#1066	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sumRows#?,RealMatrix#1156	0.0	0.0	0.0	!(r < m.getRowDimension())	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getV#?#226	0.0	0.0	0.0	!(k < m)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#sortedIndices#?,double[]#840	0.0	0.0	0.0	!(i < doubles.length)	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#522	0.0	0.0	0.0	getRowDimension()>=column	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#triu#?,RealMatrix,int#1141	0.0	0.0	0.0	!(c < m.getColumnDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,RealMatrix#1295	0.0	0.0	0.0	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#selectColumns#?,RealMatrix,int[]#1126	0.0	0.0	0.0	c < cols.length	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMultiplicationCompatible#?,AnyMatrix,AnyMatrix#541	0.0	0.0	0.0	!(left.getColumnDimension() != right.getRowDimension())	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#copyOut#?#531	0.0	0.0	0.0	!(i < nRows)	_
