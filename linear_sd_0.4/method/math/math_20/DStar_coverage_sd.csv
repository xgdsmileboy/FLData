line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#729	Infinity	Infinity	Infinity	negccov > negcovMax	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1220	0.06666666666666667	Infinity	Infinity	mat.getColumnDimension()==m	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#push#?,double[],double#806	0.06666666666666667	Infinity	Infinity	vals[i - 1]==val	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?#240	Infinity	0.0	Infinity		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?,int,double[],int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>#308	0.043478260869565216	Infinity	Infinity	lambda==diagonalOnly	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?,int#247	Infinity	0.0	Infinity		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#initializeCMA#?,double[]#591	Infinity	Infinity	Infinity	sumw * sumw / sumwq>=sumwq	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex#int#compareTo#?,DoubleIndex#851	0.06666666666666667	Infinity	Infinity	Double.compare(value,o.value)==0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#penalty#?,double[],double[]#1014	0.5	Infinity	Infinity	isMinimize ? penalty : -penalty>0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#checkParameters#?#538	0.3333333333333333	Infinity	Infinity	!(inputSigma != null)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#repair#?,double[]#994	1.0	1.0	0.7	x[i] > 1.0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#decode#?,double[]#934	0.5	0.5	0.5	i < x.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#encode#?,double[]#909	0.5	0.5	0.5	!(i < x.length)	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarMultiply#?,double#127	0.05263157894736842	1.0	0.43157894736842106	getColumnDimension()>rowCount	_
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#674	0.023809523809523808	1.0	0.41395348837209306	realEigenvalues[i]==maxAbsoluteValue	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double#value#?,double[]#949	0.5	0.5	0.3		_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#467	0.05263157894736842	0.25	0.13157894736842105	getRowDimension()<column	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#PointValuePair#optimize#?,int,FUNC,GoalType,double[],double[],double[]#114	0.125	0.14285714285714285	0.11714285714285713	upper[i]>v	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#560	0.02631578947368421	0.25	0.11578947368421053	getRowDimension()<column	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#subtract#?,RealMatrix#99	0.011904761904761904	0.16666666666666666	0.07380952380952381	getColumnDimension()>rowCount	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#updateBD#?,double#787	0.07142857142857142	0.07142857142857142	0.07142857142857142	!(max(diagD) > 1e14 * min(diagD))	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#inverse#?,int[]#1315	0.07142857142857142	0.07142857142857142	0.07142857142857142	!(i < indices.length)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#reverse#?,int[]#1327	0.07142857142857142	0.07142857142857142	0.07142857142857142	i < indices.length	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#divide#?,RealMatrix,RealMatrix#1086	0.07142857142857142	0.07142857142857142	0.07142857142857142	r < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sumRows#?,RealMatrix#1130	0.07142857142857142	0.07142857142857142	0.07142857142857142	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#triu#?,RealMatrix,int#1117	0.07142857142857142	0.07142857142857142	0.07142857142857142	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#eye#?,int,int#1195	0.06666666666666667	0.06666666666666667	0.06666666666666667	r < n	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#randn1#?,int,int#1353	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(c < popSize)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#diag#?,RealMatrix#1148	0.06666666666666667	0.06666666666666667	0.06666666666666667	i < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,double[]#1288	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(max < m[r])	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1239	0.06666666666666667	0.06666666666666667	0.06666666666666667	start==step	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#times#?,RealMatrix,RealMatrix#1071	0.06666666666666667	0.06666666666666667	0.06666666666666667	r < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1056	0.06666666666666667	0.06666666666666667	0.06666666666666667	c < m.getColumnDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#log#?,RealMatrix#1026	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(r < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#ones#?,int,int#1182	0.06666666666666667	0.06666666666666667	0.06666666666666667	r < n	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#boolean#updateEvolutionPaths#?,RealMatrix,RealMatrix#646	0.06666666666666667	0.06666666666666667	0.06666666666666667	hsig	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#void#copyColumn#?,RealMatrix,int,RealMatrix,int#1170	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(i < m1.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#max#?,RealMatrix#1253	0.06666666666666667	0.06666666666666667	0.06666666666666667	r < m.getRowDimension()	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,double[]#1302	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(min > m[r])	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#sqrt#?,RealMatrix#1041	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(r < m.getRowDimension())	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#int[]#sortedIndices#?,double[]#819	0.06666666666666667	0.06666666666666667	0.06666666666666667	!(i < doubles.length)	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#double#min#?,RealMatrix#1278	0.06666666666666667	0.06666666666666667	0.06666666666666667	min>=0	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#selectColumns#?,RealMatrix,int[]#1101	0.06666666666666667	0.06666666666666667	0.06666666666666667	r < m.getRowDimension()	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createColumnRealMatrix#?,double[]#339	0.0625	0.0625	0.0625	!(columnData == null)	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#scalarAdd#?,double#113	0.058823529411764705	0.06666666666666667	0.061960784313725495	getColumnDimension()<rowCount	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getD#?#247	0.05555555555555555	0.05555555555555555	0.05555555555555555	cachedD == null	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#add#?,RealMatrix#82	0.05263157894736842	0.05555555555555555	0.053801169590643266	getColumnDimension()>=rowCount	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#multiply#?,RealMatrix#144	0.012048192771084338	0.1111111111111111	0.05167336010709505	m.getColumnDimension()>nRows	_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealDiagonalMatrix#?,double[]#217	0.047619047619047616	0.047619047619047616	0.047619047619047616	i < diagonal.length	_
org.apache.commons.math3.linear.EigenDecomposition#RealMatrix#getV#?#223	0.045454545454545456	0.045454545454545456	0.045454545454545456	cachedV == null	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#522	0.043478260869565216	0.043478260869565216	0.043478260869565216	getRowDimension()>=column	_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextGaussian#?#106	0.04	0.043478260869565216	0.04139130434782609	r * FastMath.sin(alpha)>alpha	_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#double[]#repairAndDecode#?,double[]#921	0.06666666666666667	0.0	0.04		GT
org.apache.commons.math3.optimization.direct.CMAESOptimizer#PointValuePair#doOptimize#?#360	0.06666666666666667	0.0	0.04		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#?#FitnessFunction#?#896	0.06666666666666667	0.0	0.04		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction#void#setValueRange#?,double#982	0.06666666666666667	0.0	0.04		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#RealMatrix#zeros#?,int,int#1209	0.06666666666666667	0.0	0.04		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex#?#DoubleIndex#?,double,int#846	0.06666666666666667	0.0	0.04		_
org.apache.commons.math3.linear.AbstractRealMatrix#double#getFrobeniusNorm#?#280	0.0625	0.0	0.0375		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#int#getMaxEvaluations#?#72	0.03571428571428571	0.03571428571428571	0.03571428571428571	evaluations.getMaximalCount()!=0	_
org.apache.commons.math3.linear.MatrixUtils#void#checkAdditionCompatible#?,AnyMatrix,AnyMatrix#506	0.030303030303030304	0.03333333333333333	0.03151515151515152	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][],boolean#112	0.011764705882352941	0.058823529411764705	0.0303475935828877	d[0].length>nRows	_
org.apache.commons.math3.util.Incrementor#int#getMaximalCount#?#105	0.029411764705882353	0.030303030303030304	0.029768270944741534	maximalCount!=0	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#transpose#?#599	0.006993006993006993	0.0625	0.029195804195804198	getColumnDimension()>nRows	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#walkInRowOrder#?,RealMatrixPreservingVisitor#407	0.006944444444444444	0.0625	0.029166666666666667	getColumnDimension()>rows	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#245	0.027777777777777776	0.027777777777777776	0.027777777777777776	mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1]<=k	_
org.apache.commons.math3.optimization.SimpleValueChecker#boolean#converged#?,int,PointValuePair,PointValuePair#79	0.018867924528301886	0.038461538461538464	0.026705370101596515	FastMath.abs(p - c)>p	_
org.apache.commons.math3.util.MathArrays#int[]#copyOf#?,int[],int#549	0.043478260869565216	0.0	0.02608695652173913		_
org.apache.commons.math3.optimization.direct.CMAESOptimizer#?#CMAESOptimizer#?,int,double[],int,double,boolean,int,int,RandomGenerator,boolean#282	0.043478260869565216	0.0	0.02608695652173913		_
org.apache.commons.math3.linear.EigenDecomposition#?#EigenDecomposition#?,RealMatrix#116	0.02564102564102564	0.02564102564102564	0.025256410256410254	isSymmetric(matrix,false)	_
org.apache.commons.math3.linear.EigenDecomposition#boolean#isSymmetric#?,RealMatrix,boolean#195	0.02564102564102564	0.02564102564102564	0.025256410256410254	!(i < rows)	_
org.apache.commons.math3.linear.AbstractRealMatrix#double#walkInOptimizedOrder#?,RealMatrixPreservingVisitor#873	0.006896551724137931	0.05263157894736842	0.025190562613430126	walkInRowOrder(visitor)!=0	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#?#AbstractConvergenceChecker#?#65	0.038461538461538464	0.0	0.023076923076923078		_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQ#?#86	0.022727272727272728	0.022727272727272728	0.022727272727272728	cachedQ == null	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#98	0.022222222222222223	0.022222222222222223	0.022222222222222223	cachedQt == null	_
org.apache.commons.math3.util.Precision#int#compareTo#?,double,double,double#97	0.021739130434782608	0.021739130434782608	0.021739130434782608	0<=0	_
org.apache.commons.math3.linear.TriDiagonalTransformer#?#TriDiagonalTransformer#?,RealMatrix#63	0.02127659574468085	0.02127659574468085	0.02101063829787234	!(!matrix.isSquare())	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#537	0.02040816326530612	0.02040816326530612	0.02040816326530612	!(i < nCols)	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#double[]#getUpperBound#?#80	0.02857142857142857	0.0	0.01714285714285714		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#double[]#getLowerBound#?#73	0.02857142857142857	0.0	0.01714285714285714		_
org.apache.commons.math3.linear.EigenDecomposition#void#transformToTridiagonal#?,RealMatrix#555	0.02564102564102564	0.0	0.015384615384615384		_
org.apache.commons.math3.linear.TriDiagonalTransformer#double[]#getSecondaryDiagonalRef#?#185	0.025	0.0	0.015		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer#?#BaseAbstractMultivariateSimpleBoundsOptimizer#?,ConvergenceChecker<PointValuePair>#66	0.025	0.0	0.015		_
org.apache.commons.math3.linear.TriDiagonalTransformer#double[]#getMainDiagonalRef#?#175	0.025	0.0	0.015		_
org.apache.commons.math3.random.BitsStreamGenerator#double#nextDouble#?#87	0.013888888888888888	0.013888888888888888	0.013888888888888888	(high | low) * 0x1.0p-52d!=0	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#double#computeObjectiveValue#?,double[]#99	0.0136986301369863	0.013888888888888888	0.013774733637747335	function.value(point)>0	_
org.apache.commons.math3.linear.TriDiagonalTransformer#void#transform#?#193	0.02127659574468085	0.0	0.01276595744680851		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#PointValuePair#optimizeInternal#?,int,MultivariateFunction,GoalType,double[]#128	0.012658227848101266	0.012658227848101266	0.012658227848101266	!(f == null)	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#double#getRelativeThreshold#?#85	0.012048192771084338	0.013513513513513514	0.01263432106805601	relativeThreshold>=0	_
org.apache.commons.math3.optimization.AbstractConvergenceChecker#double#getAbsoluteThreshold#?#92	0.012195121951219513	0.012195121951219513	0.012195121951219513	absoluteThreshold>0	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2309	0.010638297872340425	0.010526315789473684	0.010593505039193728	sinQ(xa,xb)!=0	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#ConvergenceChecker<PointValuePair>#getConvergenceChecker#?#82	0.01694915254237288	0.0	0.010169491525423728		_
org.apache.commons.math3.linear.MatrixUtils#void#checkSubtractionCompatible#?,AnyMatrix,AnyMatrix#523	0.009708737864077669	0.009708737864077669	0.009708737864077669	!((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension()))	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMultiplicationCompatible#?,AnyMatrix,AnyMatrix#541	0.009259259259259259	0.009259259259259259	0.009259259259259259	!(left.getColumnDimension() != right.getRowDimension())	_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#PointValuePair#optimize#?,int,FUNC,GoalType,double[]#105	0.015151515151515152	0.0	0.00909090909090909		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#GoalType#getGoalType#?#155	0.0136986301369863	0.0	0.00821917808219178		_
org.apache.commons.math3.optimization.PointValuePair#double[]#getPoint#?#74	0.012987012987012988	0.0	0.007792207792207792		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#double[]#getStartPoint#?#162	0.012658227848101266	0.0	0.007594936708860759		_
org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer#?#BaseAbstractMultivariateOptimizer#?,ConvergenceChecker<PointValuePair>#67	0.011904761904761904	0.0	0.007142857142857142		_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2255	0.006944444444444444	0.006896551724137931	0.006925287356321839	-cosQ(xa,xb)<=0	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1799	0.0037313432835820895	0.011363636363636364	0.0067842605156037995	c<sinEpsA	_
org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor#double#end#?#41	0.006711409395973154	0.006711409395973154	0.006711409395973154	0>=0	_
org.apache.commons.math3.optimization.PointValuePair#?#PointValuePair#?,double[],double#47	0.009708737864077669	0.0	0.005825242718446601		_
org.apache.commons.math3.optimization.PointValuePair#?#PointValuePair#?,double[],double,boolean#61	0.009708737864077669	0.0	0.005825242718446601		_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,int,int#81	0.009433962264150943	0.0	0.005660377358490566		_
org.apache.commons.math3.linear.MatrixUtils#RealMatrix#createRealMatrix#?,double[][]#130	0.005649717514124294	0.005649717514124294	0.005649717514124294	!(data == null || data[0] == null)	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#copyOut#?#527	0.005376344086021506	0.005376344086021506	0.005376344086021506	i < nRows	_
org.apache.commons.math3.util.FastMath#double#cosQ#?,double,double#1820	0.003745318352059925	0.006993006993006993	0.005044393808438752	-(a - pi2a + xa)>pi2b	_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1274	0.003194888178913738	0.007518796992481203	0.0049244517043407245	lnza * epsilon + 0.19999954120254515>=x	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemB#?#3839	0.004464285714285714	0.0051813471502590676	0.0047511102886750554	finalRemB>0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double#getEntry#?,int,int#304	0.003816793893129771	0.005952380952380952	0.004671028716830243	data[row][column]<0	_
org.apache.commons.math3.util.Pair#V#getValue#?#74	0.007751937984496124	0.0	0.004651162790697674		_
org.apache.commons.math3.util.FastMath$CodyWaite#?#CodyWaite#?,double,double#3808	0.004464285714285714	0.004464285714285714	0.004464285714285714	remA > 0	_
org.apache.commons.math3.util.FastMath$CodyWaite#int#getK#?#3827	0.004464285714285714	0.004464285714285714	0.004464285714285714	finalK>=0	_
org.apache.commons.math3.util.FastMath$CodyWaite#double#getRemA#?#3833	0.004464285714285714	0.004464285714285714	0.004464285714285714	finalRemA>0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#283	0.003937007874015748	0.005208333333333333	0.004445538057742782	subMatrix[0].length==nRows	_
org.apache.commons.math3.linear.ArrayRealVector#double#getEntry#?,int#600	0.0040650406504065045	0.004347826086956522	0.004178154825026511	data[index]>0	_
org.apache.commons.math3.linear.AbstractRealMatrix#boolean#isSquare#?#616	0.006896551724137931	0.0	0.004137931034482759		_
org.apache.commons.math3.util.FastMath#double#polyCosine#?,double#1677	0.003436426116838488	0.005025125628140704	0.004071905921359375	p * x2 + 0.041666666666621166<x	_
org.apache.commons.math3.util.FastMath#double#log#?,double#1096	0.0029940119760479044	0.005128205128205128	0.0038476892369107936	log(x,null)<0	_
org.apache.commons.math3.util.FastMath#double#polySine#?,double#1657	0.003436426116838488	0.004347826086956522	0.003800986104885702	p * x2 + 0.008333333333329196<=x	_
org.apache.commons.math3.util.Pair#K#getKey#?#65	0.005847953216374269	0.0	0.003508771929824561		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#RealMatrix#createMatrix#?,int,int#144	0.005714285714285714	0.0	0.0034285714285714284		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#double[][]#getData#?#252	0.00558659217877095	0.0	0.0033519553072625698		_
org.apache.commons.math3.linear.ArrayRealVector#int#getDimension#?#610	0.0033444816053511705	0.003355704697986577	0.003348970842405333	data.length>0	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,double#272	0.00546448087431694	0.0	0.003278688524590164		_
org.apache.commons.math3.linear.ArrayRealVector#?#ArrayRealVector#?,double[]#86	0.0053475935828877	0.0	0.00320855614973262		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getRowDimension#?#335	0.0029239766081871343	0.0029239766081871343	0.0029239766081871343	(data == null) ? 0 : data.length>=0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#int#getColumnDimension#?#341	0.0029154518950437317	0.0029154518950437317	0.0029154518950437317	((data == null) || (data[0] == null)) ? 0 : data[0].length>0	_
org.apache.commons.math3.util.Pair#?#Pair#?,K,V#46	0.004424778761061947	0.0	0.002654867256637168		_
org.apache.commons.math3.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#71	0.0024875621890547263	0.0024875621890547263	0.0024875621890547263	!(columnDimension < 1)	_
org.apache.commons.math3.linear.MatrixUtils#void#checkRowIndex#?,AnyMatrix,int#402	0.0024449877750611247	0.0024449877750611247	0.0024449877750611247	!(row < 0 || row >= m.getRowDimension())	_
org.apache.commons.math3.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#418	0.0024390243902439024	0.0024390243902439024	0.0024390243902439024	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#331	0.0019157088122605363	0.003105590062111801	0.0023916613122010426	Double.doubleToLongBits(y)==xInt	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,double[][]#80	0.003968253968253968	0.0	0.0023809523809523807		_
org.apache.commons.math3.util.FastMath#double#max#?,double,double#3508	0.0023584905660377358	0.002967359050445104	0.002367475292003594	a>0	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#copyIn#?,double[][]#543	0.003937007874015748	0.0	0.002362204724409449		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setEntry#?,int,int,double#310	0.003937007874015748	0.0	0.002362204724409449		_
org.apache.commons.math3.linear.Array2DRowRealMatrix#?#Array2DRowRealMatrix#?,int,int#61	0.003816793893129771	0.0	0.0022900763358778622		_
org.apache.commons.math3.util.FastMath#long#abs#?,long#2974	0.001834862385321101	0.0029585798816568047	0.0022843493838553826	(x < 0l) ? -x : x==0	_
org.apache.commons.math3.util.FastMath#double#sqrt#?,double#375	0.001145475372279496	0.003424657534246575	0.002057148237066328	Math.sqrt(a)<=0	_
org.apache.commons.math3.util.Incrementor#void#incrementCount#?#155	0.0019569471624266144	0.00196078431372549	0.001958482022946165	!(++count > maximalCount)	_
org.apache.commons.math3.util.FastMath#int#min#?,int,int#3396	0.0019305019305019305	0.0019342359767891683	0.0019319955490168256	(a <= b) ? a : b!=0	_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int,MaxCountExceededCallback#81	0.0017921146953405018	0.0017921146953405018	0.0017921146953405018	!(cb == null)	_
org.apache.commons.math3.linear.MatrixUtils#void#checkMatrixIndex#?,AnyMatrix,int,int#390	0.0026595744680851063	0.0	0.0015957446808510637		_
org.apache.commons.math3.util.MathUtils#void#checkNotNull#?,Object#264	0.0014749262536873156	0.0014792899408284023	0.0014766717285437502	!(o == null)	_
org.apache.commons.math3.util.Incrementor#void#setMaximalCount#?,int#96	0.00205761316872428	0.0	0.0012345679012345679		_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?#53	0.001996007984031936	0.0	0.0011976047904191614		_
org.apache.commons.math3.util.Incrementor#void#resetCount#?#164	0.0019011406844106464	0.0	0.0011406844106463879		_
org.apache.commons.math3.util.Incrementor#?#Incrementor#?,int#62	0.0017953321364452424	0.0	0.0010771992818671453		_
org.apache.commons.math3.util.FastMath#double#abs#?,double#2992	8.561643835616438E-4	0.0011862396204033216	9.88194478298315E-4	(x < 0.0) ? -x : (x == 0.0) ? 0.0 : x==0	_
org.apache.commons.math3.linear.RealVectorFormat#?#RealVectorFormat#?,NumberFormat#82	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealMatrixFormat#?#RealMatrixFormat#?,NumberFormat#99	0.0	0.0	0.0		_
org.apache.commons.math3.random.MersenneTwister#?#MersenneTwister#?#108	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealMatrixFormat#NumberFormat#getFormat#?#207	0.0	0.0	0.0		_
org.apache.commons.math3.random.BitsStreamGenerator#void#clear#?#165	0.0	0.0	0.0		_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,long#216	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat#getInstance#?,Locale#224	0.0	0.0	0.0		_
org.apache.commons.math3.random.BitsStreamGenerator#?#BitsStreamGenerator#?#36	0.0	0.0	0.0		_
org.apache.commons.math3.util.CompositeFormat#NumberFormat#getDefaultNumberFormat#?,Locale#54	0.0	0.0	0.0		_
org.apache.commons.math3.util.FastMath#int#max#?,int,int#3464	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealVectorFormat#?#RealVectorFormat#?,String,String,String,NumberFormat#107	0.0	0.0	0.0		_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,int#146	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealMatrixFormat#?#RealMatrixFormat#?,String,String,String,String,String,String#115	0.0	0.0	0.0		_
org.apache.commons.math3.util.FastMathLiteralArrays#double[][]#loadLnMant#?#6174	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealMatrixFormat#?#RealMatrixFormat#?,String,String,String,String,String,String,NumberFormat#137	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat#getInstance#?,Locale#171	0.0	0.0	0.0		_
org.apache.commons.math3.util.CompositeFormat#NumberFormat#getDefaultNumberFormat#?#43	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealVectorFormat#RealVectorFormat#getInstance#?#162	0.0	0.0	0.0		_
org.apache.commons.math3.linear.RealMatrixFormat#RealMatrixFormat#getInstance#?#215	0.0	0.0	0.0		_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,int[]#203	0.0	0.0	0.0		_
