line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int,double[][],boolean#153	0.04	Infinity	Infinity	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>columns	_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#toBlocksLayout#?,double[][]#208	0.041237113402061855	Infinity	Infinity	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>columns	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#?#PearsonsCorrelation#?,double[][]#68	Infinity	0.0	Infinity		_
org.apache.commons.math.linear.BlockRealMatrix#double[]#getColumn#?,int#1194	0.25	2.0	2.25	blockHeight(iBlock)<=outIndex	_
org.apache.commons.math.stat.regression.SimpleRegression#void#addData#?,double,double#129	0.17391304347826086	2.0	2.1666666666666665	dy * dy * (double)n / (n + 1d)==dx	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#getCorrelationPValues#?#170	0.8	0.8	1.6	Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))>=r	GT
org.apache.commons.math.stat.regression.SimpleRegression#double#getR#?#433	0.3076923076923077	0.6666666666666666	0.9743589743589743	Math.sqrt(getRSquare())<b1	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#RealMatrix#computeCorrelationMatrix#?,RealMatrix#190	0.4444444444444444	0.4444444444444444	0.8888888888888888	j < i	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#void#checkSufficientData#?,RealMatrix#275	0.36363636363636365	0.4444444444444444	0.8080808080808081	!(nRows < 2 || nCols < 2)	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#double#correlation#?,double[],double[]#227	0.36363636363636365	0.36363636363636365	0.7272727272727273	!(i < xArray.length)	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getRSquare#?#456	0.26666666666666666	0.26666666666666666	0.5333333333333333	(ssto - getSumSquaredErrors()) / ssto>0	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getTotalSumSquares#?#354	0.26666666666666666	0.26666666666666666	0.5333333333333333	sumYY>0	_
org.apache.commons.math.distribution.TDistributionImpl#double#cumulativeProbability#?,double#139	0.23529411764705882	0.26666666666666666	0.5019607843137255	1.0 - 0.5 * t<x	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSlope#?#304	0.21052631578947367	0.25	0.4605263157894737	sumXY / sumXX>=0	_
org.apache.commons.math.stat.correlation.PearsonsCorrelation#?#PearsonsCorrelation#?,RealMatrix#79	0.4444444444444444	0.0	0.4444444444444444		_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double,double,int#151	0.07142857142857142	0.3333333333333333	0.40476190476190477	Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a,b,epsilon,maxIterations)) * 1.0 / fraction.evaluate(x,epsilon,maxIterations)<epsilon	_
org.apache.commons.math.stat.regression.SimpleRegression#double#getSumSquaredErrors#?#337	0.17391304347826086	0.2	0.3739130434782609	Math.max(0d,sumYY - sumXY * sumXY / sumXX)!=0	_
org.apache.commons.math.linear.BlockRealMatrix#void#setEntry#?,int,int,double#1256	0.17391304347826086	0.17391304347826086	0.34782608695652173	column / BLOCK_SIZE==iBlock	_
org.apache.commons.math.linear.BlockRealMatrix#double#getEntry#?,int,int#1242	0.1	0.2222222222222222	0.3222222222222222	blocks[iBlock * blockColumns + jBlock][k]==0	_
org.apache.commons.math.stat.regression.SimpleRegression#void#setDistribution#?,TDistribution#617	0.14285714285714285	0.14285714285714285	0.2857142857142857	!(n > 2)	_
org.apache.commons.math.distribution.TDistributionImpl#?#TDistributionImpl#?,double,double#63	0.12903225806451613	0.12903225806451613	0.25806451612903225	inverseCumAccuracy!=degreesOfFreedom	_
org.apache.commons.math.special.Gamma#double#logGamma#?,double#109	0.03571428571428571	0.21052631578947367	0.24624060150375937	((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x)>tmp	_
org.apache.commons.math.util.ContinuedFraction#double#evaluate#?,double,double,int#140	0.039603960396039604	0.14814814814814814	0.18775210854418775	a * q1 + b * q0<p0	_
org.apache.commons.math.linear.BlockRealMatrix#double[][]#createBlocksLayout#?,int,int#275	0.0625	0.125	0.1875	pEnd - pStart==columns	_
org.apache.commons.math.distribution.TDistributionImpl#void#setDegreesOfFreedomInternal#?,double#88	0.08163265306122448	0.08163265306122448	0.16326530612244897	!(newDegreesOfFreedom <= 0.0)	_
org.apache.commons.math.special.Beta#double#logBeta#?,double,double,double,int#195	0.06896551724137931	0.08695652173913043	0.15592203898050974	Gamma.logGamma(a) + Gamma.logGamma(b) - Gamma.logGamma(a + b)<=epsilon	_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int#100	0.0625	0.09302325581395349	0.1555232558139535	columns==rows	_
org.apache.commons.math.stat.regression.SimpleRegression#?#SimpleRegression#?,TDistribution#105	0.14285714285714285	0.0	0.14285714285714285		_
org.apache.commons.math.stat.regression.SimpleRegression#?#SimpleRegression#?#94	0.14285714285714285	0.0	0.14285714285714285		_
org.apache.commons.math.special.Beta#double#regularizedBeta#?,double,double,double#54	0.0625	0.06779661016949153	0.1302966101694915	regularizedBeta(x,a,b,DEFAULT_EPSILON,Integer.MAX_VALUE)>0	_
org.apache.commons.math.distribution.TDistributionImpl#?#TDistributionImpl#?,double#71	0.12903225806451613	0.0	0.12903225806451613		_
org.apache.commons.math.distribution.TDistributionImpl#void#setDegreesOfFreedom#?,double#81	0.09523809523809523	0.0	0.09523809523809523		_
org.apache.commons.math.linear.BlockRealMatrix#int#blockHeight#?,int#1675	0.037037037037037035	0.037037037037037035	0.07407407407407407	(blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE>=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#getColumnDimension#?#1351	0.036036036036036036	0.036036036036036036	0.07207207207207207	columns!=0	_
org.apache.commons.math.linear.BlockRealMatrix#int#getRowDimension#?#1345	0.03571428571428571	0.03571428571428571	0.07142857142857142	rows!=0	_
org.apache.commons.math.distribution.AbstractContinuousDistribution#?#AbstractContinuousDistribution#?#53	0.07142857142857142	0.0	0.07142857142857142		_
org.apache.commons.math.linear.BlockRealMatrix#int#blockWidth#?,int#1684	0.03389830508474576	0.03389830508474576	0.06779661016949153	(blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE>0	_
org.apache.commons.math.linear.MatrixUtils#void#checkColumnIndex#?,AnyMatrix,int#544	0.03333333333333333	0.03333333333333333	0.06666666666666667	!(column < 0 || column >= m.getColumnDimension())	_
org.apache.commons.math.distribution.AbstractDistribution#?#AbstractDistribution#?#39	0.06060606060606061	0.0	0.06060606060606061		_
org.apache.commons.math.linear.BlockRealMatrix#?#BlockRealMatrix#?,double[][]#126	0.041237113402061855	0.0	0.041237113402061855		_
org.apache.commons.math.util.ContinuedFraction#?#ContinuedFraction#?#46	0.039603960396039604	0.0	0.039603960396039604		_
org.apache.commons.math.linear.AbstractRealMatrix#?#AbstractRealMatrix#?,int,int#61	0.013513513513513514	0.013513513513513514	0.02702702702702703	!(columnDimension <= 0)	_
