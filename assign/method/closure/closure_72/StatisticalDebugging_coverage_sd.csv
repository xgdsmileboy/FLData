line	original_score	max_predicate_score	total	predicate	label
com.google.javascript.jscomp.FunctionInjector#int#inlineCostDelta#?,Node,Set<String>,InliningMode#852	0.0	0.06531531531531531	0.06531531531531531	baseOverhead + returnCount * PER_RETURN_OVERHEAD + resultCount * PER_RETURN_RESULT_OVERHEAD + aliasCount * PER_ALIAS_OVERHEAD==paramCount	_
com.google.javascript.jscomp.CodeGenerator#int#getNonEmptyChildCount#?,Node,int#1095	0.0	0.033333333333333354	0.033333333333333354	getNonEmptyChildCount(c,maxCount - i)!=maxCount	_
com.google.javascript.jscomp.FunctionInjector#boolean#inliningLowersCost#?,JSModule,Node,Collection<? extends Reference>,Set<String>,boolean,boolean#718	0.0	0.011491317671092953	0.011491317671092953	referenceCount - referencesUsingBlockInlining<referencesUsingBlockInlining	_
com.google.javascript.jscomp.FunctionInjector#boolean#doesLowerCost#?,Node,int,int,int,int,int,boolean#760	0.0	0.00655252589304587	0.00655252589304587	directInlines + blockInlines - (removable ? 1 : 0)<blockInlines	_
com.google.javascript.jscomp.parsing.IRFactory#void#setSourceInfo#?,Node,AstNode#309	0.0	4.45662717824891E-6	4.45662717824891E-6	position2charno(node.getAbsolutePosition())<lineno	_
com.google.javascript.rhino.Node#void#setCharno#?,int#1141	0.0	4.45662717824891E-6	4.45662717824891E-6	mergeLineCharNo(getLineno(),charno)>charno	_
com.google.javascript.rhino.Node#void#setLineno#?,int#1137	0.0	4.455111253674673E-6	4.455111253674673E-6	mergeLineCharNo(lineno,charno)>charno	_
com.google.javascript.jscomp.NodeUtil#boolean#isLatin#?,String#2424	0.0	2.0499675490134091E-7	2.0499675490134091E-7	s.charAt(index)<=LARGEST_BASIC_LATIN	_
com.google.javascript.rhino.Node#?#Node#?,int,Node#383	0.0	0.0	0.0	-1<=nodeType	_
com.google.javascript.rhino.Node#void#toString#?,StringBuilder,boolean,boolean,boolean#978	0.0	0.0	0.0	keys[i]!=i	_
com.google.javascript.rhino.Node#?#Node#?,int#369	0.0	0.0	0.0	-1<=nodeType	_
com.google.javascript.jscomp.FunctionInjector#int#estimateCallCost#?,Node,boolean#788	0.0	0.0	0.0	NAME_COST_ESTIMATE + PAREN_COST>=numArgs	_
com.google.javascript.rhino.Node#int[]#getSortedPropTypes#?#849	0.0	0.0	0.0	x.type>count	_
com.google.javascript.rhino.Node#?#Node#?,int,Node,Node#403	0.0	0.0	0.0	-1<=nodeType	_
com.google.javascript.jscomp.parsing.IRFactory#int#position2charno#?,int#348	0.0	0.0	0.0	sourceString.lastIndexOf('\n',position)!=position	_
com.google.javascript.jscomp.CodeGenerator#void#add#?,Node,Context#89	0.0	0.0	0.0	n.getChildCount()<=type	_
