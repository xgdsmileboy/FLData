line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math.optimization.linear.SimplexTableau#RealPointValuePair#getSolution#?#404	0.0	0.09473684210526317	0.09473684210526317	columnLabels.indexOf("x" + i)>=negativeVarColumn	GT
org.apache.commons.math.optimization.linear.SimplexSolver#void#doIteration#?,SimplexTableau#152	0.0	0.08658008658008659	0.08658008658008659	tableau.getEntry(i,pivotCol)==pivotVal	_
org.apache.commons.math.linear.ArrayRealVector#RealVector#mapMultiplyToSelf#?,double#374	0.0	0.014297729184188398	0.014297729184188398	data[i] * d==d	_
org.apache.commons.math.util.Precision#boolean#equals#?,double,double,int#285	0.0	0.00977126360204308	0.00977126360204308	SGN_MASK - yInt<xInt	_
org.apache.commons.math.optimization.linear.SimplexTableau#?#SimplexTableau#?,LinearObjectiveFunction,Collection<LinearConstraint>,GoalType,boolean,double,int#144	0.0	0.0028490028490028574	0.0028490028490028574	getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ)<maxUlps	_
org.apache.commons.math.linear.AbstractRealMatrix#void#setRowVector#?,int,RealVector#484	0.0	0.0	0.0	getColumnDimension()>=row	_
org.apache.commons.math.optimization.linear.SimplexSolver#Integer#getPivotColumn#?,SimplexTableau#73	0.0	0.0	0.0	tableau.getEntry(0,i)>=minValue	_
org.apache.commons.math.optimization.linear.SimplexTableau#RealMatrix#createTableau#?,boolean#190	0.0	0.0	0.0	(getNumObjectiveFunctions() == 1) ? 0 : 1<=width	_
org.apache.commons.math.optimization.linear.SimplexTableau#void#dropPhase1Objective#?#345	0.0	0.0	0.0	i + getArtificialVariableOffset()>i	_
org.apache.commons.math.linear.AbstractRealMatrix#double[]#getRow#?,int#515	0.0	0.0	0.0	getColumnDimension()>row	_
org.apache.commons.math.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#269	0.0	0.0	0.0	subMatrix.length>=column	_
org.apache.commons.math.optimization.linear.SimplexSolver#Integer#getPivotRow#?,SimplexTableau,int#98	0.0	0.0	0.0	Precision.compareTo(ratio,minRatio,maxUlps)<i	_
