line	original_score	max_predicate_score	total	predicate	label
org.apache.commons.math3.linear.EigenDecomposition#void#findEigenVectors#?,double[][]#658	0.0	0.44239921800925164	0.44239921800925164	s * t>=maxAbsoluteValue	_
org.apache.commons.math3.util.FastMath#double#log#?,double,double[]#1303	0.0	0.3696446953243555	0.3696446953243555	lnza * epsilon>x	_
org.apache.commons.math3.optim.univariate.BrentOptimizer#UnivariatePointValuePair#doOptimize#?#268	0.0	0.3404822351758437	0.3404822351758437	w==e	_
org.apache.commons.math3.optim.univariate.BracketFinder#void#search#?,UnivariateFunction,GoalType,double,double#124	0.0	0.3329252268176244	0.3329252268176244	tmp>fB	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#?#PowellOptimizer#?,double,double,double,double,ConvergenceChecker<PointValuePair>#131	0.0	0.33017711950757317	0.33017711950757317	abs>=lineAbs	_
org.apache.commons.math3.random.MersenneTwister#int#next#?,int#256	0.0	0.3282230812249118	0.3282230812249118	y >>> 11<=bits	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#double[][]#newPointAndDirection#?,double[],double[],double#288	0.0	0.32569639050544397	0.32569639050544397	p[i] + nD[i]==optimum	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer#PointValuePair#doOptimize#?#214	0.0	0.3170901312380173	0.3170901312380173	i==iter	GT
org.apache.commons.math3.analysis.function.Sinc#double#value#?,double#90	0.0	0.2789014684747942	0.2789014684747942	scaledX * scaledX>x	_
org.apache.commons.math3.linear.TriDiagonalTransformer#void#transform#?#247	0.0	0.2558601363469747	0.2558601363469747	hK[i] * z[j] + z[i] * hK[j]>xNormSqr	_
org.apache.commons.math3.optim.AbstractConvergenceChecker#?#AbstractConvergenceChecker#?,double,double#46	0.0	0.24597413320083492	0.24597413320083492	relativeThreshold>absoluteThreshold	_
org.apache.commons.math3.util.FastMath#double#atan#?,double,double,boolean#2490	0.0	0.23912134692097076	0.23912134692097076	xb * TANGENT_TABLE_B[idx]==yb	_
org.apache.commons.math3.util.FastMath#double#sinQ#?,double,double#1768	0.0	0.2247272747833713	0.2247272747833713	c<sinEpsB	_
org.apache.commons.math3.linear.TriDiagonalTransformer#RealMatrix#getQT#?#109	0.0	0.2185650293480977	0.2185650293480977	1 + beta * hK[k]>beta	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#PointValuePair#doOptimize#?#266	0.0	0.18894425386193825	0.18894425386193825	r[i] * steepestDescent[i]==delta	GT
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#updateCovariance#?,boolean,RealMatrix,RealMatrix,int[],RealMatrix#710	0.0	0.17194399765774293	0.17194399765774293	hsig ? 0 : ccov1 * cc * (2 - cc)>negccov	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#repmat#?,RealMatrix,int,int#1177	0.0	0.16536453545553312	0.16536453545553312	mat.getRowDimension()<n	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#double#max#?,RealMatrix#1213	0.0	0.16536453545553312	0.16536453545553312	m.getEntry(r,c)<max	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#initializeCMA#?,double[]#609	0.0	0.16536453545553312	0.16536453545553312	(1 + 2 * Math.max(0,Math.sqrt((mueff - 1) / (dimension + 1)) - 1)) * Math.max(0.3,1 - dimension / (1e-6 + maxIterations)) + cs<sumw	_
org.apache.commons.math3.linear.BlockRealMatrix#double[][]#createBlocksLayout#?,int,int#259	0.0	0.16191972850724723	0.16191972850724723	(columns + BLOCK_SIZE - 1) / BLOCK_SIZE==rows	_
org.apache.commons.math3.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int#104	0.0	0.1602745464672812	0.1602745464672812	(columns + BLOCK_SIZE - 1) / BLOCK_SIZE==rows	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#double#min#?,RealMatrix#1230	0.0	0.15732652674196185	0.15732652674196185	m.getEntry(r,c)>=min	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#push#?,double[],double#805	0.0	0.12652338167021213	0.12652338167021213	vals[i - 1]==val	_
org.apache.commons.math3.linear.MatrixUtils#boolean#isSymmetricInternal#?,RealMatrix,double,boolean#401	0.0	0.0903886525271035	0.0903886525271035	matrix.getEntry(j,i)<relativeTolerance	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#?#CMAESOptimizer#?,int,double,boolean,int,int,RandomGenerator,boolean,ConvergenceChecker<PointValuePair>#235	0.0	0.08700449831986336	0.08700449831986336	diagonalOnly<=checkFeasableCount	_
org.apache.commons.math3.optim.univariate.UnivariatePointValuePair#?#UnivariatePointValuePair#?,double,double#47	0.0	0.0835688759636717	0.0835688759636717	value>point	_
org.apache.commons.math3.linear.BlockRealMatrix#?#BlockRealMatrix#?,int,int,double[][],boolean#154	0.0	0.07737870971552802	0.07737870971552802	(rows + BLOCK_SIZE - 1) / BLOCK_SIZE>=rows	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getColumn#?,int#560	0.0	0.05702812458693927	0.05702812458693927	getRowDimension()<column	_
org.apache.commons.math3.util.FastMath#double#cosQ#?,double,double#1846	0.0	0.053556906631788956	0.053556906631788956	pi2b - xb<xb	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#PointValuePair#evaluateNewSimplex#?,MultivariateFunction,PointValuePair[],double,Comparator<PointValuePair>#206	0.0	0.05347067817285659	0.05347067817285659	xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j])>coeff	_
org.apache.commons.math3.analysis.solvers.BrentSolver#double#brent#?,double,double,double,double#222	0.0	0.03787351218314101	0.03787351218314101	tol>c	_
org.apache.commons.math3.util.FastMath#double#polyCosine#?,double#1702	0.0	0.03393735163534407	0.03393735163534407	p * x2 + 0.041666666666621166<x	_
org.apache.commons.math3.util.Precision#boolean#equals#?,double,double,int#332	0.0	0.030702622804218874	0.030702622804218874	Double.doubleToLongBits(y)==xInt	_
org.apache.commons.math3.analysis.solvers.BrentSolver#double#doSolve#?#113	0.0	0.027049767216313986	0.027049767216313986	computeObjectiveValue(max)>=max	_
org.apache.commons.math3.util.FastMath#double#polySine#?,double#1682	0.0	0.02505887794571588	0.02505887794571588	p * x2 + 0.008333333333329196<=x	_
org.apache.commons.math3.util.FastMath#double#cos#?,double#2320	0.0	0.006291395580223084	0.006291395580223084	cw.getRemB()<x	_
org.apache.commons.math3.optim.univariate.BrentOptimizer#?#BrentOptimizer#?,double,double,ConvergenceChecker<UnivariatePointValuePair>#90	0.0	0.005197405856250056	0.005197405856250056	rel>=abs	_
org.apache.commons.math3.util.FastMath#double#sin#?,double#2232	0.0	0.005030117782700906	0.005030117782700906	x>xb	_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,int[]#183	0.0	0.00494683230317434	0.00494683230317434	mt[N - 1]<i	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#?#BaseAbstractUnivariateSolver#?,double,double,double#95	0.0	8.86064905016695E-4	8.86064905016695E-4	absoluteAccuracy>relativeAccuracy	_
org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver#void#setup#?,int,FUNC,double,double,double#182	0.0	4.296633238505942E-4	4.296633238505942E-4	startValue>min	_
org.apache.commons.math3.linear.BlockRealMatrix#double[][]#toBlocksLayout#?,double[][]#210	0.0	6.419142941114142E-5	6.419142941114142E-5	rawData[i].length>i	_
org.apache.commons.math3.linear.AbstractRealMatrix#RealMatrix#getColumnMatrix#?,int#467	0.0	0.0	0.0	getRowDimension()>=column	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#int[]#reverse#?,int[]#1286	0.0	0.0	0.0	indices[indices.length - i - 1]>i	_
org.apache.commons.math3.optim.univariate.SearchInterval#?#SearchInterval#?,double,double,double#57	0.0	0.0	0.0	lo!=init	_
org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer#double#findUpperBound#?,UnivariateFunction,double,double#334	0.0	0.0	0.0	f.value(b)!=h	_
org.apache.commons.math3.linear.AbstractRealMatrix#double[]#getRow#?,int#535	0.0	0.0	0.0	getColumnDimension()>row	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex#?#MultiDirectionalSimplex#?,double[],double,double#117	0.0	0.0	0.0	khi!=gamma	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#square#?,RealMatrix#1014	0.0	0.0	0.0	e * e<=e	_
org.apache.commons.math3.linear.BlockRealMatrix#BlockRealMatrix#transpose#?#1237	0.0	0.0	0.0	lInc>=jBlock	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex#?#NelderMeadSimplex#?,double[],double,double,double,double#144	0.0	0.0	0.0	sigma<khi	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#void#updateBD#?,double#787	0.0	0.0	0.0	max(diagD) / 1e14 - min(diagD)<negccov	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#int[]#sortedIndices#?,double[]#824	0.0	0.0	0.0	dis[i].index>=i	_
org.apache.commons.math3.linear.AbstractRealMatrix#void#setColumnVector#?,int,RealVector#522	0.0	0.0	0.0	getRowDimension()>=column	_
org.apache.commons.math3.linear.Array2DRowRealMatrix#void#setSubMatrix#?,double[][],int,int#285	0.0	0.0	0.0	subMatrix[0].length!=row	_
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer#RealMatrix#sequence#?,double,double,double#1200	0.0	0.0	0.0	step<=end	_
org.apache.commons.math3.random.MersenneTwister#void#setSeed#?,int#146	0.0	0.0	0.0	(int)longMT<=seed	_
org.apache.commons.math3.linear.BlockRealMatrix#double[]#operate#?,double[]#1272	0.0	0.0	0.0	FastMath.min(pStart + BLOCK_SIZE,rows)>=iBlock	_
